{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "df=pd.read_csv('car data.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Car_Name</th>\n",
       "      <th>Year</th>\n",
       "      <th>Selling_Price</th>\n",
       "      <th>Present_Price</th>\n",
       "      <th>Kms_Driven</th>\n",
       "      <th>Fuel_Type</th>\n",
       "      <th>Seller_Type</th>\n",
       "      <th>Transmission</th>\n",
       "      <th>Owner</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>ritz</td>\n",
       "      <td>2014</td>\n",
       "      <td>3.35</td>\n",
       "      <td>5.59</td>\n",
       "      <td>27000</td>\n",
       "      <td>Petrol</td>\n",
       "      <td>Dealer</td>\n",
       "      <td>Manual</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>sx4</td>\n",
       "      <td>2013</td>\n",
       "      <td>4.75</td>\n",
       "      <td>9.54</td>\n",
       "      <td>43000</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Dealer</td>\n",
       "      <td>Manual</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>ciaz</td>\n",
       "      <td>2017</td>\n",
       "      <td>7.25</td>\n",
       "      <td>9.85</td>\n",
       "      <td>6900</td>\n",
       "      <td>Petrol</td>\n",
       "      <td>Dealer</td>\n",
       "      <td>Manual</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>wagon r</td>\n",
       "      <td>2011</td>\n",
       "      <td>2.85</td>\n",
       "      <td>4.15</td>\n",
       "      <td>5200</td>\n",
       "      <td>Petrol</td>\n",
       "      <td>Dealer</td>\n",
       "      <td>Manual</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>swift</td>\n",
       "      <td>2014</td>\n",
       "      <td>4.60</td>\n",
       "      <td>6.87</td>\n",
       "      <td>42450</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Dealer</td>\n",
       "      <td>Manual</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Car_Name  Year  Selling_Price  Present_Price  Kms_Driven Fuel_Type  \\\n",
       "0     ritz  2014           3.35           5.59       27000    Petrol   \n",
       "1      sx4  2013           4.75           9.54       43000    Diesel   \n",
       "2     ciaz  2017           7.25           9.85        6900    Petrol   \n",
       "3  wagon r  2011           2.85           4.15        5200    Petrol   \n",
       "4    swift  2014           4.60           6.87       42450    Diesel   \n",
       "\n",
       "  Seller_Type Transmission  Owner  \n",
       "0      Dealer       Manual      0  \n",
       "1      Dealer       Manual      0  \n",
       "2      Dealer       Manual      0  \n",
       "3      Dealer       Manual      0  \n",
       "4      Dealer       Manual      0  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head() #controlliamo il df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# vediamo quante righe e quante colonne"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(301, 9)"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "## noi vogliamo predirre il prezzo di vendita a partire dalle altre features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['Dealer' 'Individual']\n"
     ]
    }
   ],
   "source": [
    "print(df['Seller_Type'].unique()) #2 valori"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['Manual' 'Automatic']\n"
     ]
    }
   ],
   "source": [
    "print(df['Transmission'].unique())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0 1 3]\n"
     ]
    }
   ],
   "source": [
    "print(df['Owner'].unique())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['ritz' 'sx4' 'ciaz' 'wagon r' 'swift' 'vitara brezza' 's cross'\n",
      " 'alto 800' 'ertiga' 'dzire' 'alto k10' 'ignis' '800' 'baleno' 'omni'\n",
      " 'fortuner' 'innova' 'corolla altis' 'etios cross' 'etios g' 'etios liva'\n",
      " 'corolla' 'etios gd' 'camry' 'land cruiser' 'Royal Enfield Thunder 500'\n",
      " 'UM Renegade Mojave' 'KTM RC200' 'Bajaj Dominar 400'\n",
      " 'Royal Enfield Classic 350' 'KTM RC390' 'Hyosung GT250R'\n",
      " 'Royal Enfield Thunder 350' 'KTM 390 Duke ' 'Mahindra Mojo XT300'\n",
      " 'Bajaj Pulsar RS200' 'Royal Enfield Bullet 350'\n",
      " 'Royal Enfield Classic 500' 'Bajaj Avenger 220' 'Bajaj Avenger 150'\n",
      " 'Honda CB Hornet 160R' 'Yamaha FZ S V 2.0' 'Yamaha FZ 16'\n",
      " 'TVS Apache RTR 160' 'Bajaj Pulsar 150' 'Honda CBR 150' 'Hero Extreme'\n",
      " 'Bajaj Avenger 220 dtsi' 'Bajaj Avenger 150 street' 'Yamaha FZ  v 2.0'\n",
      " 'Bajaj Pulsar  NS 200' 'Bajaj Pulsar 220 F' 'TVS Apache RTR 180'\n",
      " 'Hero Passion X pro' 'Bajaj Pulsar NS 200' 'Yamaha Fazer '\n",
      " 'Honda Activa 4G' 'TVS Sport ' 'Honda Dream Yuga '\n",
      " 'Bajaj Avenger Street 220' 'Hero Splender iSmart' 'Activa 3g'\n",
      " 'Hero Passion Pro' 'Honda CB Trigger' 'Yamaha FZ S '\n",
      " 'Bajaj Pulsar 135 LS' 'Activa 4g' 'Honda CB Unicorn'\n",
      " 'Hero Honda CBZ extreme' 'Honda Karizma' 'Honda Activa 125' 'TVS Jupyter'\n",
      " 'Hero Honda Passion Pro' 'Hero Splender Plus' 'Honda CB Shine'\n",
      " 'Bajaj Discover 100' 'Suzuki Access 125' 'TVS Wego' 'Honda CB twister'\n",
      " 'Hero Glamour' 'Hero Super Splendor' 'Bajaj Discover 125' 'Hero Hunk'\n",
      " 'Hero  Ignitor Disc' 'Hero  CBZ Xtreme' 'Bajaj  ct 100' 'i20' 'grand i10'\n",
      " 'i10' 'eon' 'xcent' 'elantra' 'creta' 'verna' 'city' 'brio' 'amaze'\n",
      " 'jazz']\n",
      "[2014 2013 2017 2011 2018 2015 2016 2009 2010 2012 2003 2008 2006 2005\n",
      " 2004 2007]\n",
      "[ 3.35  4.75  7.25  2.85  4.6   9.25  6.75  6.5   8.75  7.45  6.85  7.5\n",
      "  6.1   2.25  7.75  3.25  2.65  4.9   4.4   2.5   2.9   3.    4.15  6.\n",
      "  1.95  3.1   2.35  4.95  5.5   2.95  4.65  0.35  5.85  2.55  1.25  1.05\n",
      "  5.8  14.9  23.   18.   16.    2.75  3.6   4.5   4.1  19.99  6.95 18.75\n",
      " 23.5  33.   19.75  4.35 14.25  3.95  1.5   5.25 14.5  14.73 12.5   3.49\n",
      " 35.    5.9   3.45  3.8  11.25  3.51  4.   20.75 17.    7.05  9.65  1.75\n",
      "  1.7   1.65  1.45  1.35  1.2   1.15  1.11  1.1   1.    0.95  0.9   0.75\n",
      "  0.8   0.78  0.72  0.65  0.6   0.55  0.52  0.51  0.5   0.48  0.45  0.42\n",
      "  0.4   0.38  0.31  0.3   0.27  0.25  0.2   0.18  0.17  0.16  0.15  0.12\n",
      "  0.1   5.75  5.15  7.9   4.85 11.75  3.15  6.45  3.5   8.25  5.11  2.7\n",
      "  6.15 11.45  3.9   9.1   4.8   2.    5.35  6.25  5.95  5.2   3.75 12.9\n",
      "  5.    5.4   7.2  10.25  8.5   8.4   9.15  6.6   3.65  8.35  6.7   5.3\n",
      " 10.9   8.65  9.7   2.1   8.99  7.4   5.65 10.11  6.4   8.55  9.5  11.5 ]\n",
      "[ 5.59   9.54   9.85   4.15   6.87   9.83   8.12   8.61   8.89   8.92\n",
      "  3.6   10.38   9.94   7.71   7.21  10.79   5.09   7.98   3.95   5.71\n",
      "  8.01   3.46   4.41   4.99   5.87   6.49   5.98   4.89   7.49   9.95\n",
      "  8.06   7.74   7.2    2.28   3.76   7.87   3.98   7.15   2.69  12.04\n",
      "  9.29  30.61  19.77  10.21  15.04   7.27  18.54   6.8   35.96  18.61\n",
      "  7.7   36.23   6.95  23.15  20.45  13.74  20.91   6.76  12.48   8.93\n",
      " 14.68  12.35  22.83  14.89   7.85  25.39  13.46  23.73  92.6    6.05\n",
      " 16.09  13.7   22.78  18.64   1.9    1.82   1.78   1.6    1.47   2.37\n",
      "  3.45   1.5    2.4    1.4    1.26   1.17   1.75   0.95   0.8    0.87\n",
      "  0.84   0.82   0.81   0.74   1.2    0.787  0.99   0.94   0.826  0.55\n",
      "  0.88   0.51   0.52   0.54   0.73   0.83   0.64   0.72   1.05   0.57\n",
      "  0.48   0.58   0.47   0.75   0.65   0.32   6.79   5.7    4.6    4.43\n",
      "  7.13   8.1   14.79  13.6    9.4    7.6    9.9    6.82   5.35   7.\n",
      "  5.97   5.8    8.7   10.     7.5    8.4    5.9   14.    11.8    8.5\n",
      "  7.9    6.4    6.1   13.09  11.6   11.    12.5  ]\n",
      "[ 27000  43000   6900   5200  42450   2071  18796  33429  20273  42367\n",
      "   2135  51000  15000  26000  77427  41678  35500  41442  25000   2400\n",
      "  50000  45280  56879  20000  55138  16200  44542  45000  51439  54200\n",
      "  39000  49998  48767 127000  10079  62000  24524  46706  58000  45780\n",
      "  64532  65000  25870  37000 104707  40000 135000  90000  70000  40534\n",
      "  39485  41000  40001  40588  78000  47000   6000  11000  59000  88000\n",
      "  12000  71000  56001  83000  36000  72000 135154  80000  89000  23000\n",
      "  38000 197176 142000  56000  58242  75000  29000   8700  50024   3000\n",
      "   1400   4000   1200   4100  21700  16500  18000   7000  35000  17000\n",
      "  17500  33000  14000   5400   5700  46500  11500   1300   5000   3500\n",
      "    500  11800  23500  16000  16600  32000  19000  24000  31000  13000\n",
      "   8000   4300   8600  14500   1000  42000   5500   6700  13700  38600\n",
      "  30000 213000  60000  21000   1900  22000  55000  49000 500000  53000\n",
      "  92233  28200  53460  28282   3493  12479  34797   3435  21125  35775\n",
      "  43535  22671  31604  20114  36100  12500  45078  38488  77632  61381\n",
      "  36198  22517  24678  57000  52132  15001  12900   4492  15141  11849\n",
      "  68000  60241  23709  32322  35866  34000  35934  56701  31427  48000\n",
      "  54242  53675  49562  40324  36054  29223   5600  40023  16002  40026\n",
      "  21200  19434  18828  69341  69562  27600  61203  30753  24800  21780\n",
      "  40126  14465  50456  63000   9010   9800  15059  28569  44000  10980\n",
      "  33019  60076  33988  87934   9000   5464]\n",
      "['Petrol' 'Diesel' 'CNG']\n",
      "['Dealer' 'Individual']\n",
      "['Manual' 'Automatic']\n",
      "[0 1 3]\n"
     ]
    }
   ],
   "source": [
    "for var in df:\n",
    "    print(df[var].unique()) #se voglio farlo per tutte"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#controlliamo la presenza di missing values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Car_Name         0\n",
       "Year             0\n",
       "Selling_Price    0\n",
       "Present_Price    0\n",
       "Kms_Driven       0\n",
       "Fuel_Type        0\n",
       "Seller_Type      0\n",
       "Transmission     0\n",
       "Owner            0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isnull().sum() #no missing values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Year</th>\n",
       "      <th>Selling_Price</th>\n",
       "      <th>Present_Price</th>\n",
       "      <th>Kms_Driven</th>\n",
       "      <th>Owner</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>301.000000</td>\n",
       "      <td>301.000000</td>\n",
       "      <td>301.000000</td>\n",
       "      <td>301.000000</td>\n",
       "      <td>301.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>2013.627907</td>\n",
       "      <td>4.661296</td>\n",
       "      <td>7.628472</td>\n",
       "      <td>36947.205980</td>\n",
       "      <td>0.043189</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>2.891554</td>\n",
       "      <td>5.082812</td>\n",
       "      <td>8.644115</td>\n",
       "      <td>38886.883882</td>\n",
       "      <td>0.247915</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>2003.000000</td>\n",
       "      <td>0.100000</td>\n",
       "      <td>0.320000</td>\n",
       "      <td>500.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>2012.000000</td>\n",
       "      <td>0.900000</td>\n",
       "      <td>1.200000</td>\n",
       "      <td>15000.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>2014.000000</td>\n",
       "      <td>3.600000</td>\n",
       "      <td>6.400000</td>\n",
       "      <td>32000.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>2016.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>9.900000</td>\n",
       "      <td>48767.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>2018.000000</td>\n",
       "      <td>35.000000</td>\n",
       "      <td>92.600000</td>\n",
       "      <td>500000.000000</td>\n",
       "      <td>3.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              Year  Selling_Price  Present_Price     Kms_Driven       Owner\n",
       "count   301.000000     301.000000     301.000000     301.000000  301.000000\n",
       "mean   2013.627907       4.661296       7.628472   36947.205980    0.043189\n",
       "std       2.891554       5.082812       8.644115   38886.883882    0.247915\n",
       "min    2003.000000       0.100000       0.320000     500.000000    0.000000\n",
       "25%    2012.000000       0.900000       1.200000   15000.000000    0.000000\n",
       "50%    2014.000000       3.600000       6.400000   32000.000000    0.000000\n",
       "75%    2016.000000       6.000000       9.900000   48767.000000    0.000000\n",
       "max    2018.000000      35.000000      92.600000  500000.000000    3.000000"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#controlliamo velocemente qualche statistica sul df\n",
    "df.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#creiamo un nuovo dataset dove eliminamo car name perchè non ci serve "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Car_Name', 'Year', 'Selling_Price', 'Present_Price', 'Kms_Driven',\n",
       "       'Fuel_Type', 'Seller_Type', 'Transmission', 'Owner'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "newDF=df[['Year', 'Selling_Price', 'Present_Price', 'Kms_Driven',\n",
    "       'Fuel_Type', 'Seller_Type', 'Transmission', 'Owner']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Year</th>\n",
       "      <th>Selling_Price</th>\n",
       "      <th>Present_Price</th>\n",
       "      <th>Kms_Driven</th>\n",
       "      <th>Fuel_Type</th>\n",
       "      <th>Seller_Type</th>\n",
       "      <th>Transmission</th>\n",
       "      <th>Owner</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2014</td>\n",
       "      <td>3.35</td>\n",
       "      <td>5.59</td>\n",
       "      <td>27000</td>\n",
       "      <td>Petrol</td>\n",
       "      <td>Dealer</td>\n",
       "      <td>Manual</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2013</td>\n",
       "      <td>4.75</td>\n",
       "      <td>9.54</td>\n",
       "      <td>43000</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Dealer</td>\n",
       "      <td>Manual</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2017</td>\n",
       "      <td>7.25</td>\n",
       "      <td>9.85</td>\n",
       "      <td>6900</td>\n",
       "      <td>Petrol</td>\n",
       "      <td>Dealer</td>\n",
       "      <td>Manual</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2011</td>\n",
       "      <td>2.85</td>\n",
       "      <td>4.15</td>\n",
       "      <td>5200</td>\n",
       "      <td>Petrol</td>\n",
       "      <td>Dealer</td>\n",
       "      <td>Manual</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2014</td>\n",
       "      <td>4.60</td>\n",
       "      <td>6.87</td>\n",
       "      <td>42450</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Dealer</td>\n",
       "      <td>Manual</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Year  Selling_Price  Present_Price  Kms_Driven Fuel_Type Seller_Type  \\\n",
       "0  2014           3.35           5.59       27000    Petrol      Dealer   \n",
       "1  2013           4.75           9.54       43000    Diesel      Dealer   \n",
       "2  2017           7.25           9.85        6900    Petrol      Dealer   \n",
       "3  2011           2.85           4.15        5200    Petrol      Dealer   \n",
       "4  2014           4.60           6.87       42450    Diesel      Dealer   \n",
       "\n",
       "  Transmission  Owner  \n",
       "0       Manual      0  \n",
       "1       Manual      0  \n",
       "2       Manual      0  \n",
       "3       Manual      0  \n",
       "4       Manual      0  "
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "newDF.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#creiamo una nuova feature ANNO CORRENTE per vedere quanto le machcine sono \"vecchie\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "newDF['Anno corrente']=2022"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Year</th>\n",
       "      <th>Selling_Price</th>\n",
       "      <th>Present_Price</th>\n",
       "      <th>Kms_Driven</th>\n",
       "      <th>Fuel_Type</th>\n",
       "      <th>Seller_Type</th>\n",
       "      <th>Transmission</th>\n",
       "      <th>Owner</th>\n",
       "      <th>Anno corrente</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2014</td>\n",
       "      <td>3.35</td>\n",
       "      <td>5.59</td>\n",
       "      <td>27000</td>\n",
       "      <td>Petrol</td>\n",
       "      <td>Dealer</td>\n",
       "      <td>Manual</td>\n",
       "      <td>0</td>\n",
       "      <td>2022</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2013</td>\n",
       "      <td>4.75</td>\n",
       "      <td>9.54</td>\n",
       "      <td>43000</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Dealer</td>\n",
       "      <td>Manual</td>\n",
       "      <td>0</td>\n",
       "      <td>2022</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2017</td>\n",
       "      <td>7.25</td>\n",
       "      <td>9.85</td>\n",
       "      <td>6900</td>\n",
       "      <td>Petrol</td>\n",
       "      <td>Dealer</td>\n",
       "      <td>Manual</td>\n",
       "      <td>0</td>\n",
       "      <td>2022</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2011</td>\n",
       "      <td>2.85</td>\n",
       "      <td>4.15</td>\n",
       "      <td>5200</td>\n",
       "      <td>Petrol</td>\n",
       "      <td>Dealer</td>\n",
       "      <td>Manual</td>\n",
       "      <td>0</td>\n",
       "      <td>2022</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2014</td>\n",
       "      <td>4.60</td>\n",
       "      <td>6.87</td>\n",
       "      <td>42450</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Dealer</td>\n",
       "      <td>Manual</td>\n",
       "      <td>0</td>\n",
       "      <td>2022</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Year  Selling_Price  Present_Price  Kms_Driven Fuel_Type Seller_Type  \\\n",
       "0  2014           3.35           5.59       27000    Petrol      Dealer   \n",
       "1  2013           4.75           9.54       43000    Diesel      Dealer   \n",
       "2  2017           7.25           9.85        6900    Petrol      Dealer   \n",
       "3  2011           2.85           4.15        5200    Petrol      Dealer   \n",
       "4  2014           4.60           6.87       42450    Diesel      Dealer   \n",
       "\n",
       "  Transmission  Owner  Anno corrente  \n",
       "0       Manual      0           2022  \n",
       "1       Manual      0           2022  \n",
       "2       Manual      0           2022  \n",
       "3       Manual      0           2022  \n",
       "4       Manual      0           2022  "
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "newDF.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "newDF['numero di anni cars']=newDF['Anno corrente']-newDF['Year']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0       8\n",
      "1       9\n",
      "2       5\n",
      "3      11\n",
      "4       8\n",
      "       ..\n",
      "296     6\n",
      "297     7\n",
      "298    13\n",
      "299     5\n",
      "300     6\n",
      "Name: numero di anni cars, Length: 301, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "print(newDF['numero di anni cars'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#eliminiamo ora le due colonne degli anni"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "newDF.drop(['Year'], axis=1, inplace=True) #importante mettere inplace=True perchè significa che la eliminiamo permanentemente \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "newDF.drop(['Anno corrente'], axis=1, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Selling_Price</th>\n",
       "      <th>Present_Price</th>\n",
       "      <th>Kms_Driven</th>\n",
       "      <th>Fuel_Type</th>\n",
       "      <th>Seller_Type</th>\n",
       "      <th>Transmission</th>\n",
       "      <th>Owner</th>\n",
       "      <th>numero di anni cars</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>3.35</td>\n",
       "      <td>5.59</td>\n",
       "      <td>27000</td>\n",
       "      <td>Petrol</td>\n",
       "      <td>Dealer</td>\n",
       "      <td>Manual</td>\n",
       "      <td>0</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>4.75</td>\n",
       "      <td>9.54</td>\n",
       "      <td>43000</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Dealer</td>\n",
       "      <td>Manual</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>7.25</td>\n",
       "      <td>9.85</td>\n",
       "      <td>6900</td>\n",
       "      <td>Petrol</td>\n",
       "      <td>Dealer</td>\n",
       "      <td>Manual</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2.85</td>\n",
       "      <td>4.15</td>\n",
       "      <td>5200</td>\n",
       "      <td>Petrol</td>\n",
       "      <td>Dealer</td>\n",
       "      <td>Manual</td>\n",
       "      <td>0</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4.60</td>\n",
       "      <td>6.87</td>\n",
       "      <td>42450</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Dealer</td>\n",
       "      <td>Manual</td>\n",
       "      <td>0</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Selling_Price  Present_Price  Kms_Driven Fuel_Type Seller_Type  \\\n",
       "0           3.35           5.59       27000    Petrol      Dealer   \n",
       "1           4.75           9.54       43000    Diesel      Dealer   \n",
       "2           7.25           9.85        6900    Petrol      Dealer   \n",
       "3           2.85           4.15        5200    Petrol      Dealer   \n",
       "4           4.60           6.87       42450    Diesel      Dealer   \n",
       "\n",
       "  Transmission  Owner  numero di anni cars  \n",
       "0       Manual      0                    8  \n",
       "1       Manual      0                    9  \n",
       "2       Manual      0                    5  \n",
       "3       Manual      0                   11  \n",
       "4       Manual      0                    8  "
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "newDF.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "#mi va a dividere le variabili categoriche in variabile dummy\n",
    "newDF=pd.get_dummies(newDF, drop_first=True) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Selling_Price</th>\n",
       "      <th>Present_Price</th>\n",
       "      <th>Kms_Driven</th>\n",
       "      <th>Owner</th>\n",
       "      <th>numero di anni cars</th>\n",
       "      <th>Fuel_Type_Diesel</th>\n",
       "      <th>Fuel_Type_Petrol</th>\n",
       "      <th>Seller_Type_Individual</th>\n",
       "      <th>Transmission_Manual</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>3.35</td>\n",
       "      <td>5.59</td>\n",
       "      <td>27000</td>\n",
       "      <td>0</td>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>4.75</td>\n",
       "      <td>9.54</td>\n",
       "      <td>43000</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>7.25</td>\n",
       "      <td>9.85</td>\n",
       "      <td>6900</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2.85</td>\n",
       "      <td>4.15</td>\n",
       "      <td>5200</td>\n",
       "      <td>0</td>\n",
       "      <td>11</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4.60</td>\n",
       "      <td>6.87</td>\n",
       "      <td>42450</td>\n",
       "      <td>0</td>\n",
       "      <td>8</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Selling_Price  Present_Price  Kms_Driven  Owner  numero di anni cars  \\\n",
       "0           3.35           5.59       27000      0                    8   \n",
       "1           4.75           9.54       43000      0                    9   \n",
       "2           7.25           9.85        6900      0                    5   \n",
       "3           2.85           4.15        5200      0                   11   \n",
       "4           4.60           6.87       42450      0                    8   \n",
       "\n",
       "   Fuel_Type_Diesel  Fuel_Type_Petrol  Seller_Type_Individual  \\\n",
       "0                 0                 1                       0   \n",
       "1                 1                 0                       0   \n",
       "2                 0                 1                       0   \n",
       "3                 0                 1                       0   \n",
       "4                 1                 0                       0   \n",
       "\n",
       "   Transmission_Manual  \n",
       "0                    1  \n",
       "1                    1  \n",
       "2                    1  \n",
       "3                    1  \n",
       "4                    1  "
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "newDF.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# andiamo a vedere la correlazione tra le variabili"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Selling_Price</th>\n",
       "      <th>Present_Price</th>\n",
       "      <th>Kms_Driven</th>\n",
       "      <th>Owner</th>\n",
       "      <th>numero di anni cars</th>\n",
       "      <th>Fuel_Type_Diesel</th>\n",
       "      <th>Fuel_Type_Petrol</th>\n",
       "      <th>Seller_Type_Individual</th>\n",
       "      <th>Transmission_Manual</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Selling_Price</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.878983</td>\n",
       "      <td>0.029187</td>\n",
       "      <td>-0.088344</td>\n",
       "      <td>-0.236141</td>\n",
       "      <td>0.552339</td>\n",
       "      <td>-0.540571</td>\n",
       "      <td>-0.550724</td>\n",
       "      <td>-0.367128</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Present_Price</th>\n",
       "      <td>0.878983</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.203647</td>\n",
       "      <td>0.008057</td>\n",
       "      <td>0.047584</td>\n",
       "      <td>0.473306</td>\n",
       "      <td>-0.465244</td>\n",
       "      <td>-0.512030</td>\n",
       "      <td>-0.348715</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Kms_Driven</th>\n",
       "      <td>0.029187</td>\n",
       "      <td>0.203647</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.089216</td>\n",
       "      <td>0.524342</td>\n",
       "      <td>0.172515</td>\n",
       "      <td>-0.172874</td>\n",
       "      <td>-0.101419</td>\n",
       "      <td>-0.162510</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Owner</th>\n",
       "      <td>-0.088344</td>\n",
       "      <td>0.008057</td>\n",
       "      <td>0.089216</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.182104</td>\n",
       "      <td>-0.053469</td>\n",
       "      <td>0.055687</td>\n",
       "      <td>0.124269</td>\n",
       "      <td>-0.050316</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>numero di anni cars</th>\n",
       "      <td>-0.236141</td>\n",
       "      <td>0.047584</td>\n",
       "      <td>0.524342</td>\n",
       "      <td>0.182104</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.064315</td>\n",
       "      <td>0.059959</td>\n",
       "      <td>0.039896</td>\n",
       "      <td>-0.000394</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Fuel_Type_Diesel</th>\n",
       "      <td>0.552339</td>\n",
       "      <td>0.473306</td>\n",
       "      <td>0.172515</td>\n",
       "      <td>-0.053469</td>\n",
       "      <td>-0.064315</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.979648</td>\n",
       "      <td>-0.350467</td>\n",
       "      <td>-0.098643</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Fuel_Type_Petrol</th>\n",
       "      <td>-0.540571</td>\n",
       "      <td>-0.465244</td>\n",
       "      <td>-0.172874</td>\n",
       "      <td>0.055687</td>\n",
       "      <td>0.059959</td>\n",
       "      <td>-0.979648</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.358321</td>\n",
       "      <td>0.091013</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Seller_Type_Individual</th>\n",
       "      <td>-0.550724</td>\n",
       "      <td>-0.512030</td>\n",
       "      <td>-0.101419</td>\n",
       "      <td>0.124269</td>\n",
       "      <td>0.039896</td>\n",
       "      <td>-0.350467</td>\n",
       "      <td>0.358321</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.063240</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Transmission_Manual</th>\n",
       "      <td>-0.367128</td>\n",
       "      <td>-0.348715</td>\n",
       "      <td>-0.162510</td>\n",
       "      <td>-0.050316</td>\n",
       "      <td>-0.000394</td>\n",
       "      <td>-0.098643</td>\n",
       "      <td>0.091013</td>\n",
       "      <td>0.063240</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                        Selling_Price  Present_Price  Kms_Driven     Owner  \\\n",
       "Selling_Price                1.000000       0.878983    0.029187 -0.088344   \n",
       "Present_Price                0.878983       1.000000    0.203647  0.008057   \n",
       "Kms_Driven                   0.029187       0.203647    1.000000  0.089216   \n",
       "Owner                       -0.088344       0.008057    0.089216  1.000000   \n",
       "numero di anni cars         -0.236141       0.047584    0.524342  0.182104   \n",
       "Fuel_Type_Diesel             0.552339       0.473306    0.172515 -0.053469   \n",
       "Fuel_Type_Petrol            -0.540571      -0.465244   -0.172874  0.055687   \n",
       "Seller_Type_Individual      -0.550724      -0.512030   -0.101419  0.124269   \n",
       "Transmission_Manual         -0.367128      -0.348715   -0.162510 -0.050316   \n",
       "\n",
       "                        numero di anni cars  Fuel_Type_Diesel  \\\n",
       "Selling_Price                     -0.236141          0.552339   \n",
       "Present_Price                      0.047584          0.473306   \n",
       "Kms_Driven                         0.524342          0.172515   \n",
       "Owner                              0.182104         -0.053469   \n",
       "numero di anni cars                1.000000         -0.064315   \n",
       "Fuel_Type_Diesel                  -0.064315          1.000000   \n",
       "Fuel_Type_Petrol                   0.059959         -0.979648   \n",
       "Seller_Type_Individual             0.039896         -0.350467   \n",
       "Transmission_Manual               -0.000394         -0.098643   \n",
       "\n",
       "                        Fuel_Type_Petrol  Seller_Type_Individual  \\\n",
       "Selling_Price                  -0.540571               -0.550724   \n",
       "Present_Price                  -0.465244               -0.512030   \n",
       "Kms_Driven                     -0.172874               -0.101419   \n",
       "Owner                           0.055687                0.124269   \n",
       "numero di anni cars             0.059959                0.039896   \n",
       "Fuel_Type_Diesel               -0.979648               -0.350467   \n",
       "Fuel_Type_Petrol                1.000000                0.358321   \n",
       "Seller_Type_Individual          0.358321                1.000000   \n",
       "Transmission_Manual             0.091013                0.063240   \n",
       "\n",
       "                        Transmission_Manual  \n",
       "Selling_Price                     -0.367128  \n",
       "Present_Price                     -0.348715  \n",
       "Kms_Driven                        -0.162510  \n",
       "Owner                             -0.050316  \n",
       "numero di anni cars               -0.000394  \n",
       "Fuel_Type_Diesel                  -0.098643  \n",
       "Fuel_Type_Petrol                   0.091013  \n",
       "Seller_Type_Individual             0.063240  \n",
       "Transmission_Manual                1.000000  "
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "newDF.corr()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.PairGrid at 0x1e40a769520>"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1620x1620 with 90 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.pairplot(newDF)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Figure size 2880x1440 with 0 Axes>"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "<Figure size 2880x1440 with 0 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "corrmat=newDF.corr()\n",
    "top_corr=corrmat.index\n",
    "plt.figure(figsize=(20,20))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "g=sns.heatmap(newDF[top_corr].corr(), annot=True, cmap=\"RdYlGn\") ##da questo grafico possiamo vedere alcune correlazioni"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Selling_Price</th>\n",
       "      <th>Present_Price</th>\n",
       "      <th>Kms_Driven</th>\n",
       "      <th>Owner</th>\n",
       "      <th>numero di anni cars</th>\n",
       "      <th>Fuel_Type_Diesel</th>\n",
       "      <th>Fuel_Type_Petrol</th>\n",
       "      <th>Seller_Type_Individual</th>\n",
       "      <th>Transmission_Manual</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>3.35</td>\n",
       "      <td>5.59</td>\n",
       "      <td>27000</td>\n",
       "      <td>0</td>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>4.75</td>\n",
       "      <td>9.54</td>\n",
       "      <td>43000</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>7.25</td>\n",
       "      <td>9.85</td>\n",
       "      <td>6900</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2.85</td>\n",
       "      <td>4.15</td>\n",
       "      <td>5200</td>\n",
       "      <td>0</td>\n",
       "      <td>11</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4.60</td>\n",
       "      <td>6.87</td>\n",
       "      <td>42450</td>\n",
       "      <td>0</td>\n",
       "      <td>8</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Selling_Price  Present_Price  Kms_Driven  Owner  numero di anni cars  \\\n",
       "0           3.35           5.59       27000      0                    8   \n",
       "1           4.75           9.54       43000      0                    9   \n",
       "2           7.25           9.85        6900      0                    5   \n",
       "3           2.85           4.15        5200      0                   11   \n",
       "4           4.60           6.87       42450      0                    8   \n",
       "\n",
       "   Fuel_Type_Diesel  Fuel_Type_Petrol  Seller_Type_Individual  \\\n",
       "0                 0                 1                       0   \n",
       "1                 1                 0                       0   \n",
       "2                 0                 1                       0   \n",
       "3                 0                 1                       0   \n",
       "4                 1                 0                       0   \n",
       "\n",
       "   Transmission_Manual  \n",
       "0                    1  \n",
       "1                    1  \n",
       "2                    1  \n",
       "3                    1  \n",
       "4                    1  "
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "newDF.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "## DIVIDIAMO FEATURES E VARIABILE DIPENDENTE"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "x=newDF.iloc[:,1:]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "y=newDF.iloc[:,0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Present_Price</th>\n",
       "      <th>Kms_Driven</th>\n",
       "      <th>Owner</th>\n",
       "      <th>numero di anni cars</th>\n",
       "      <th>Fuel_Type_Diesel</th>\n",
       "      <th>Fuel_Type_Petrol</th>\n",
       "      <th>Seller_Type_Individual</th>\n",
       "      <th>Transmission_Manual</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>5.59</td>\n",
       "      <td>27000</td>\n",
       "      <td>0</td>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>9.54</td>\n",
       "      <td>43000</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>9.85</td>\n",
       "      <td>6900</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4.15</td>\n",
       "      <td>5200</td>\n",
       "      <td>0</td>\n",
       "      <td>11</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>6.87</td>\n",
       "      <td>42450</td>\n",
       "      <td>0</td>\n",
       "      <td>8</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Present_Price  Kms_Driven  Owner  numero di anni cars  Fuel_Type_Diesel  \\\n",
       "0           5.59       27000      0                    8                 0   \n",
       "1           9.54       43000      0                    9                 1   \n",
       "2           9.85        6900      0                    5                 0   \n",
       "3           4.15        5200      0                   11                 0   \n",
       "4           6.87       42450      0                    8                 1   \n",
       "\n",
       "   Fuel_Type_Petrol  Seller_Type_Individual  Transmission_Manual  \n",
       "0                 1                       0                    1  \n",
       "1                 0                       0                    1  \n",
       "2                 1                       0                    1  \n",
       "3                 1                       0                    1  \n",
       "4                 0                       0                    1  "
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    3.35\n",
       "1    4.75\n",
       "2    7.25\n",
       "3    2.85\n",
       "4    4.60\n",
       "Name: Selling_Price, dtype: float64"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# qual è l'ordine delle features piu importanti?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "ExtraTreesRegressor()"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.ensemble import ExtraTreesRegressor\n",
    "model=ExtraTreesRegressor()\n",
    "model.fit(x,y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.37474094 0.04168452 0.00111273 0.07612729 0.22976644 0.01170851\n",
      " 0.12765426 0.1372053 ]\n"
     ]
    }
   ],
   "source": [
    "print(model.feature_importances_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "feature_imp=pd.Series(model.feature_importances_, index=x.columns)\n",
    "feature_imp.nlargest(5).plot(kind='barh')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "x_train,x_test,y_train,y_test=train_test_split(x,y, test_size=0.2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(240, 8)"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x_train.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(61, 8)"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_train.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.ensemble import RandomForestRegressor\n",
    "rf=RandomForestRegressor()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200]\n"
     ]
    }
   ],
   "source": [
    "##hyperparameters\n",
    "import numpy as np\n",
    "#numero di alberi in random forest\n",
    "n_estimators=[int(x) for x in np.linspace(start=100, stop=1200, num=12)]\n",
    "print(n_estimators)\n",
    "\n",
    "#max numero di livelli\n",
    "max_depth = [int(x) for x in np.linspace(5, 30, num = 6)]\n",
    "#numero di feature da considerare ad ogni split\n",
    "max_features = ['auto', 'sqrt']\n",
    "#minimo numero di campioni richesti per splittare un nodo\n",
    "min_samples_split = [2, 5, 10, 15, 100]\n",
    "#minimo numero di campioni richiesti ad ogni nodo foglia \n",
    "min_samples_leaf = [1, 2, 5, 10]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'n_estimators': [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200], 'max_features': ['auto', 'sqrt'], 'max_depth': [5, 10, 15, 20, 25, 30], 'min_samples_split': [2, 5, 10, 15, 100], 'min_samples_leaf': [1, 2, 5, 10]}\n"
     ]
    }
   ],
   "source": [
    "random_grid = {'n_estimators': n_estimators,\n",
    "               'max_features': max_features,\n",
    "               'max_depth': max_depth,\n",
    "               'min_samples_split': min_samples_split,\n",
    "               'min_samples_leaf': min_samples_leaf}\n",
    "\n",
    "print(random_grid)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'RandomForestRegressor' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[1;32m~\\AppData\\Local\\Temp/ipykernel_5072/2218153038.py\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[1;32mfrom\u001b[0m \u001b[0msklearn\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mmodel_selection\u001b[0m \u001b[1;32mimport\u001b[0m \u001b[0mRandomizedSearchCV\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 2\u001b[1;33m \u001b[0mrf\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mRandomForestRegressor\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m: name 'RandomForestRegressor' is not defined"
     ]
    }
   ],
   "source": [
    "from sklearn.model_selection import RandomizedSearchCV\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "metadata": {},
   "outputs": [],
   "source": [
    "rf_random= RandomizedSearchCV(estimator=rf, param_distributions= random_grid, return_train_score=True, scoring='neg_mean_squared_error', n_iter=100, cv=10, verbose=2, random_state=42, n_jobs=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 10 folds for each of 100 candidates, totalling 1000 fits\n",
      "[CV] END max_depth=5, max_features=sqrt, min_samples_leaf=10, min_samples_split=100, n_estimators=400; total time=   1.1s\n",
      "[CV] END max_depth=5, max_features=sqrt, min_samples_leaf=10, min_samples_split=100, n_estimators=400; total time=   1.1s\n",
      "[CV] END max_depth=5, max_features=sqrt, min_samples_leaf=10, min_samples_split=100, n_estimators=400; total time=   1.1s\n",
      "[CV] END max_depth=5, max_features=sqrt, min_samples_leaf=10, min_samples_split=100, n_estimators=400; total time=   1.1s\n",
      "[CV] END max_depth=5, max_features=sqrt, min_samples_leaf=10, min_samples_split=100, n_estimators=400; total time=   1.1s\n",
      "[CV] END max_depth=5, max_features=sqrt, min_samples_leaf=10, min_samples_split=100, n_estimators=400; total time=   1.1s\n",
      "[CV] END max_depth=5, max_features=sqrt, min_samples_leaf=10, min_samples_split=100, n_estimators=400; total time=   1.1s\n",
      "[CV] END max_depth=5, max_features=sqrt, min_samples_leaf=10, min_samples_split=100, n_estimators=400; total time=   1.1s\n",
      "[CV] END max_depth=5, max_features=sqrt, min_samples_leaf=10, min_samples_split=100, n_estimators=400; total time=   1.1s\n",
      "[CV] END max_depth=5, max_features=sqrt, min_samples_leaf=10, min_samples_split=100, n_estimators=400; total time=   1.1s\n",
      "[CV] END max_depth=20, max_features=auto, min_samples_leaf=1, min_samples_split=5, n_estimators=200; total time=   0.6s\n",
      "[CV] END max_depth=20, max_features=auto, min_samples_leaf=1, min_samples_split=5, n_estimators=200; total time=   0.6s\n",
      "[CV] END max_depth=20, max_features=auto, min_samples_leaf=1, min_samples_split=5, n_estimators=200; total time=   0.6s\n",
      "[CV] END max_depth=20, max_features=auto, min_samples_leaf=1, min_samples_split=5, n_estimators=200; total time=   0.6s\n",
      "[CV] END max_depth=20, max_features=auto, min_samples_leaf=1, min_samples_split=5, n_estimators=200; total time=   0.6s\n",
      "[CV] END max_depth=20, max_features=auto, min_samples_leaf=1, min_samples_split=5, n_estimators=200; total time=   0.6s\n",
      "[CV] END max_depth=20, max_features=auto, min_samples_leaf=1, min_samples_split=5, n_estimators=200; total time=   0.6s\n",
      "[CV] END max_depth=20, max_features=auto, min_samples_leaf=1, min_samples_split=5, n_estimators=200; total time=   0.6s\n",
      "[CV] END max_depth=20, max_features=auto, min_samples_leaf=1, min_samples_split=5, n_estimators=200; total time=   0.6s\n",
      "[CV] END max_depth=20, max_features=auto, min_samples_leaf=1, min_samples_split=5, n_estimators=200; total time=   0.6s\n",
      "[CV] END max_depth=25, max_features=sqrt, min_samples_leaf=10, min_samples_split=15, n_estimators=200; total time=   0.5s\n",
      "[CV] END max_depth=25, max_features=sqrt, min_samples_leaf=10, min_samples_split=15, n_estimators=200; total time=   0.5s\n",
      "[CV] END max_depth=25, max_features=sqrt, min_samples_leaf=10, min_samples_split=15, n_estimators=200; total time=   0.5s\n",
      "[CV] END max_depth=25, max_features=sqrt, min_samples_leaf=10, min_samples_split=15, n_estimators=200; total time=   0.5s\n",
      "[CV] END max_depth=25, max_features=sqrt, min_samples_leaf=10, min_samples_split=15, n_estimators=200; total time=   0.5s\n",
      "[CV] END max_depth=25, max_features=sqrt, min_samples_leaf=10, min_samples_split=15, n_estimators=200; total time=   0.5s\n",
      "[CV] END max_depth=25, max_features=sqrt, min_samples_leaf=10, min_samples_split=15, n_estimators=200; total time=   0.5s\n",
      "[CV] END max_depth=25, max_features=sqrt, min_samples_leaf=10, min_samples_split=15, n_estimators=200; total time=   0.5s\n",
      "[CV] END max_depth=25, max_features=sqrt, min_samples_leaf=10, min_samples_split=15, n_estimators=200; total time=   0.5s\n",
      "[CV] END max_depth=25, max_features=sqrt, min_samples_leaf=10, min_samples_split=15, n_estimators=200; total time=   0.5s\n",
      "[CV] END max_depth=20, max_features=auto, min_samples_leaf=5, min_samples_split=15, n_estimators=600; total time=   1.8s\n",
      "[CV] END max_depth=20, max_features=auto, min_samples_leaf=5, min_samples_split=15, n_estimators=600; total time=   1.9s\n",
      "[CV] END max_depth=20, max_features=auto, min_samples_leaf=5, min_samples_split=15, n_estimators=600; total time=   1.9s\n",
      "[CV] END max_depth=20, max_features=auto, min_samples_leaf=5, min_samples_split=15, n_estimators=600; total time=   1.8s\n",
      "[CV] END max_depth=20, max_features=auto, min_samples_leaf=5, min_samples_split=15, n_estimators=600; total time=   1.9s\n",
      "[CV] END max_depth=20, max_features=auto, min_samples_leaf=5, min_samples_split=15, n_estimators=600; total time=   1.8s\n",
      "[CV] END max_depth=20, max_features=auto, min_samples_leaf=5, min_samples_split=15, n_estimators=600; total time=   1.8s\n",
      "[CV] END max_depth=20, max_features=auto, min_samples_leaf=5, min_samples_split=15, n_estimators=600; total time=   1.8s\n",
      "[CV] END max_depth=20, max_features=auto, min_samples_leaf=5, min_samples_split=15, n_estimators=600; total time=   1.8s\n",
      "[CV] END max_depth=20, max_features=auto, min_samples_leaf=5, min_samples_split=15, n_estimators=600; total time=   1.9s\n",
      "[CV] END max_depth=15, max_features=auto, min_samples_leaf=5, min_samples_split=5, n_estimators=300; total time=   0.9s\n",
      "[CV] END max_depth=15, max_features=auto, min_samples_leaf=5, min_samples_split=5, n_estimators=300; total time=   0.9s\n",
      "[CV] END max_depth=15, max_features=auto, min_samples_leaf=5, min_samples_split=5, n_estimators=300; total time=   0.9s\n",
      "[CV] END max_depth=15, max_features=auto, min_samples_leaf=5, min_samples_split=5, n_estimators=300; total time=   0.9s\n",
      "[CV] END max_depth=15, max_features=auto, min_samples_leaf=5, min_samples_split=5, n_estimators=300; total time=   0.9s\n",
      "[CV] END max_depth=15, max_features=auto, min_samples_leaf=5, min_samples_split=5, n_estimators=300; total time=   0.9s\n",
      "[CV] END max_depth=15, max_features=auto, min_samples_leaf=5, min_samples_split=5, n_estimators=300; total time=   0.9s\n",
      "[CV] END max_depth=15, max_features=auto, min_samples_leaf=5, min_samples_split=5, n_estimators=300; total time=   0.9s\n",
      "[CV] END max_depth=15, max_features=auto, min_samples_leaf=5, min_samples_split=5, n_estimators=300; total time=   0.9s\n",
      "[CV] END max_depth=15, max_features=auto, min_samples_leaf=5, min_samples_split=5, n_estimators=300; total time=   0.9s\n",
      "[CV] END max_depth=15, max_features=sqrt, min_samples_leaf=1, min_samples_split=100, n_estimators=800; total time=   2.3s\n",
      "[CV] END max_depth=15, max_features=sqrt, min_samples_leaf=1, min_samples_split=100, n_estimators=800; total time=   2.2s\n",
      "[CV] END max_depth=15, max_features=sqrt, min_samples_leaf=1, min_samples_split=100, n_estimators=800; total time=   2.2s\n",
      "[CV] END max_depth=15, max_features=sqrt, min_samples_leaf=1, min_samples_split=100, n_estimators=800; total time=   2.2s\n",
      "[CV] END max_depth=15, max_features=sqrt, min_samples_leaf=1, min_samples_split=100, n_estimators=800; total time=   2.2s\n",
      "[CV] END max_depth=15, max_features=sqrt, min_samples_leaf=1, min_samples_split=100, n_estimators=800; total time=   2.2s\n",
      "[CV] END max_depth=15, max_features=sqrt, min_samples_leaf=1, min_samples_split=100, n_estimators=800; total time=   2.4s\n",
      "[CV] END max_depth=15, max_features=sqrt, min_samples_leaf=1, min_samples_split=100, n_estimators=800; total time=   2.2s\n",
      "[CV] END max_depth=15, max_features=sqrt, min_samples_leaf=1, min_samples_split=100, n_estimators=800; total time=   2.2s\n",
      "[CV] END max_depth=15, max_features=sqrt, min_samples_leaf=1, min_samples_split=100, n_estimators=800; total time=   2.3s\n",
      "[CV] END max_depth=15, max_features=auto, min_samples_leaf=5, min_samples_split=100, n_estimators=100; total time=   0.2s\n",
      "[CV] END max_depth=15, max_features=auto, min_samples_leaf=5, min_samples_split=100, n_estimators=100; total time=   0.2s\n",
      "[CV] END max_depth=15, max_features=auto, min_samples_leaf=5, min_samples_split=100, n_estimators=100; total time=   0.2s\n",
      "[CV] END max_depth=15, max_features=auto, min_samples_leaf=5, min_samples_split=100, n_estimators=100; total time=   0.2s\n",
      "[CV] END max_depth=15, max_features=auto, min_samples_leaf=5, min_samples_split=100, n_estimators=100; total time=   0.2s\n",
      "[CV] END max_depth=15, max_features=auto, min_samples_leaf=5, min_samples_split=100, n_estimators=100; total time=   0.3s\n",
      "[CV] END max_depth=15, max_features=auto, min_samples_leaf=5, min_samples_split=100, n_estimators=100; total time=   0.2s\n",
      "[CV] END max_depth=15, max_features=auto, min_samples_leaf=5, min_samples_split=100, n_estimators=100; total time=   0.2s\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV] END max_depth=15, max_features=auto, min_samples_leaf=5, min_samples_split=100, n_estimators=100; total time=   0.2s\n",
      "[CV] END max_depth=15, max_features=auto, min_samples_leaf=5, min_samples_split=100, n_estimators=100; total time=   0.2s\n",
      "[CV] END max_depth=25, max_features=sqrt, min_samples_leaf=2, min_samples_split=10, n_estimators=900; total time=   2.7s\n",
      "[CV] END max_depth=25, max_features=sqrt, min_samples_leaf=2, min_samples_split=10, n_estimators=900; total time=   2.7s\n",
      "[CV] END max_depth=25, max_features=sqrt, min_samples_leaf=2, min_samples_split=10, n_estimators=900; total time=   2.7s\n",
      "[CV] END max_depth=25, max_features=sqrt, min_samples_leaf=2, min_samples_split=10, n_estimators=900; total time=   2.7s\n",
      "[CV] END max_depth=25, max_features=sqrt, min_samples_leaf=2, min_samples_split=10, n_estimators=900; total time=   2.6s\n",
      "[CV] END max_depth=25, max_features=sqrt, min_samples_leaf=2, min_samples_split=10, n_estimators=900; total time=   2.7s\n",
      "[CV] END max_depth=25, max_features=sqrt, min_samples_leaf=2, min_samples_split=10, n_estimators=900; total time=   2.6s\n",
      "[CV] END max_depth=25, max_features=sqrt, min_samples_leaf=2, min_samples_split=10, n_estimators=900; total time=   2.6s\n",
      "[CV] END max_depth=25, max_features=sqrt, min_samples_leaf=2, min_samples_split=10, n_estimators=900; total time=   2.6s\n",
      "[CV] END max_depth=25, max_features=sqrt, min_samples_leaf=2, min_samples_split=10, n_estimators=900; total time=   3.4s\n",
      "[CV] END max_depth=10, max_features=sqrt, min_samples_leaf=10, min_samples_split=15, n_estimators=1000; total time=   3.1s\n",
      "[CV] END max_depth=10, max_features=sqrt, min_samples_leaf=10, min_samples_split=15, n_estimators=1000; total time=   3.2s\n",
      "[CV] END max_depth=10, max_features=sqrt, min_samples_leaf=10, min_samples_split=15, n_estimators=1000; total time=   3.2s\n",
      "[CV] END max_depth=10, max_features=sqrt, min_samples_leaf=10, min_samples_split=15, n_estimators=1000; total time=   3.3s\n",
      "[CV] END max_depth=10, max_features=sqrt, min_samples_leaf=10, min_samples_split=15, n_estimators=1000; total time=   3.1s\n",
      "[CV] END max_depth=10, max_features=sqrt, min_samples_leaf=10, min_samples_split=15, n_estimators=1000; total time=   3.1s\n",
      "[CV] END max_depth=10, max_features=sqrt, min_samples_leaf=10, min_samples_split=15, n_estimators=1000; total time=   3.1s\n",
      "[CV] END max_depth=10, max_features=sqrt, min_samples_leaf=10, min_samples_split=15, n_estimators=1000; total time=   4.0s\n",
      "[CV] END max_depth=10, max_features=sqrt, min_samples_leaf=10, min_samples_split=15, n_estimators=1000; total time=   3.3s\n",
      "[CV] END max_depth=10, max_features=sqrt, min_samples_leaf=10, min_samples_split=15, n_estimators=1000; total time=   2.9s\n",
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=5, min_samples_split=2, n_estimators=100; total time=   0.2s\n",
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=5, min_samples_split=2, n_estimators=100; total time=   0.2s\n",
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=5, min_samples_split=2, n_estimators=100; total time=   0.2s\n",
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=5, min_samples_split=2, n_estimators=100; total time=   0.2s\n",
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=5, min_samples_split=2, n_estimators=100; total time=   0.2s\n",
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=5, min_samples_split=2, n_estimators=100; total time=   0.2s\n",
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=5, min_samples_split=2, n_estimators=100; total time=   0.2s\n",
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=5, min_samples_split=2, n_estimators=100; total time=   0.2s\n",
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=5, min_samples_split=2, n_estimators=100; total time=   0.3s\n",
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=5, min_samples_split=2, n_estimators=100; total time=   0.3s\n",
      "[CV] END max_depth=30, max_features=sqrt, min_samples_leaf=5, min_samples_split=5, n_estimators=300; total time=   1.0s\n",
      "[CV] END max_depth=30, max_features=sqrt, min_samples_leaf=5, min_samples_split=5, n_estimators=300; total time=   0.8s\n",
      "[CV] END max_depth=30, max_features=sqrt, min_samples_leaf=5, min_samples_split=5, n_estimators=300; total time=   0.8s\n",
      "[CV] END max_depth=30, max_features=sqrt, min_samples_leaf=5, min_samples_split=5, n_estimators=300; total time=   0.8s\n",
      "[CV] END max_depth=30, max_features=sqrt, min_samples_leaf=5, min_samples_split=5, n_estimators=300; total time=   0.8s\n",
      "[CV] END max_depth=30, max_features=sqrt, min_samples_leaf=5, min_samples_split=5, n_estimators=300; total time=   0.8s\n",
      "[CV] END max_depth=30, max_features=sqrt, min_samples_leaf=5, min_samples_split=5, n_estimators=300; total time=   0.8s\n",
      "[CV] END max_depth=30, max_features=sqrt, min_samples_leaf=5, min_samples_split=5, n_estimators=300; total time=   0.8s\n",
      "[CV] END max_depth=30, max_features=sqrt, min_samples_leaf=5, min_samples_split=5, n_estimators=300; total time=   0.8s\n",
      "[CV] END max_depth=30, max_features=sqrt, min_samples_leaf=5, min_samples_split=5, n_estimators=300; total time=   0.8s\n",
      "[CV] END max_depth=30, max_features=sqrt, min_samples_leaf=2, min_samples_split=10, n_estimators=400; total time=   1.2s\n",
      "[CV] END max_depth=30, max_features=sqrt, min_samples_leaf=2, min_samples_split=10, n_estimators=400; total time=   1.1s\n",
      "[CV] END max_depth=30, max_features=sqrt, min_samples_leaf=2, min_samples_split=10, n_estimators=400; total time=   1.1s\n",
      "[CV] END max_depth=30, max_features=sqrt, min_samples_leaf=2, min_samples_split=10, n_estimators=400; total time=   1.1s\n",
      "[CV] END max_depth=30, max_features=sqrt, min_samples_leaf=2, min_samples_split=10, n_estimators=400; total time=   1.2s\n",
      "[CV] END max_depth=30, max_features=sqrt, min_samples_leaf=2, min_samples_split=10, n_estimators=400; total time=   1.1s\n",
      "[CV] END max_depth=30, max_features=sqrt, min_samples_leaf=2, min_samples_split=10, n_estimators=400; total time=   1.2s\n",
      "[CV] END max_depth=30, max_features=sqrt, min_samples_leaf=2, min_samples_split=10, n_estimators=400; total time=   1.2s\n",
      "[CV] END max_depth=30, max_features=sqrt, min_samples_leaf=2, min_samples_split=10, n_estimators=400; total time=   1.1s\n",
      "[CV] END max_depth=30, max_features=sqrt, min_samples_leaf=2, min_samples_split=10, n_estimators=400; total time=   1.2s\n",
      "[CV] END max_depth=5, max_features=sqrt, min_samples_leaf=5, min_samples_split=2, n_estimators=900; total time=   2.6s\n",
      "[CV] END max_depth=5, max_features=sqrt, min_samples_leaf=5, min_samples_split=2, n_estimators=900; total time=   2.6s\n",
      "[CV] END max_depth=5, max_features=sqrt, min_samples_leaf=5, min_samples_split=2, n_estimators=900; total time=   2.6s\n",
      "[CV] END max_depth=5, max_features=sqrt, min_samples_leaf=5, min_samples_split=2, n_estimators=900; total time=   2.6s\n",
      "[CV] END max_depth=5, max_features=sqrt, min_samples_leaf=5, min_samples_split=2, n_estimators=900; total time=   2.6s\n",
      "[CV] END max_depth=5, max_features=sqrt, min_samples_leaf=5, min_samples_split=2, n_estimators=900; total time=   2.6s\n",
      "[CV] END max_depth=5, max_features=sqrt, min_samples_leaf=5, min_samples_split=2, n_estimators=900; total time=   2.6s\n",
      "[CV] END max_depth=5, max_features=sqrt, min_samples_leaf=5, min_samples_split=2, n_estimators=900; total time=   2.6s\n",
      "[CV] END max_depth=5, max_features=sqrt, min_samples_leaf=5, min_samples_split=2, n_estimators=900; total time=   3.5s\n",
      "[CV] END max_depth=5, max_features=sqrt, min_samples_leaf=5, min_samples_split=2, n_estimators=900; total time=   2.6s\n",
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=2, min_samples_split=5, n_estimators=900; total time=   2.9s\n",
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=2, min_samples_split=5, n_estimators=900; total time=   2.7s\n",
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=2, min_samples_split=5, n_estimators=900; total time=   2.7s\n",
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=2, min_samples_split=5, n_estimators=900; total time=   2.7s\n",
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=2, min_samples_split=5, n_estimators=900; total time=   2.7s\n",
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=2, min_samples_split=5, n_estimators=900; total time=   2.7s\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=2, min_samples_split=5, n_estimators=900; total time=   2.7s\n",
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=2, min_samples_split=5, n_estimators=900; total time=   2.7s\n",
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=2, min_samples_split=5, n_estimators=900; total time=   2.7s\n",
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=2, min_samples_split=5, n_estimators=900; total time=   2.7s\n",
      "[CV] END max_depth=10, max_features=sqrt, min_samples_leaf=2, min_samples_split=15, n_estimators=200; total time=   0.5s\n",
      "[CV] END max_depth=10, max_features=sqrt, min_samples_leaf=2, min_samples_split=15, n_estimators=200; total time=   0.5s\n",
      "[CV] END max_depth=10, max_features=sqrt, min_samples_leaf=2, min_samples_split=15, n_estimators=200; total time=   0.5s\n",
      "[CV] END max_depth=10, max_features=sqrt, min_samples_leaf=2, min_samples_split=15, n_estimators=200; total time=   0.5s\n",
      "[CV] END max_depth=10, max_features=sqrt, min_samples_leaf=2, min_samples_split=15, n_estimators=200; total time=   0.5s\n",
      "[CV] END max_depth=10, max_features=sqrt, min_samples_leaf=2, min_samples_split=15, n_estimators=200; total time=   0.5s\n",
      "[CV] END max_depth=10, max_features=sqrt, min_samples_leaf=2, min_samples_split=15, n_estimators=200; total time=   0.5s\n",
      "[CV] END max_depth=10, max_features=sqrt, min_samples_leaf=2, min_samples_split=15, n_estimators=200; total time=   0.6s\n",
      "[CV] END max_depth=10, max_features=sqrt, min_samples_leaf=2, min_samples_split=15, n_estimators=200; total time=   0.5s\n",
      "[CV] END max_depth=10, max_features=sqrt, min_samples_leaf=2, min_samples_split=15, n_estimators=200; total time=   0.5s\n",
      "[CV] END max_depth=10, max_features=sqrt, min_samples_leaf=2, min_samples_split=2, n_estimators=200; total time=   0.5s\n",
      "[CV] END max_depth=10, max_features=sqrt, min_samples_leaf=2, min_samples_split=2, n_estimators=200; total time=   0.5s\n",
      "[CV] END max_depth=10, max_features=sqrt, min_samples_leaf=2, min_samples_split=2, n_estimators=200; total time=   0.5s\n",
      "[CV] END max_depth=10, max_features=sqrt, min_samples_leaf=2, min_samples_split=2, n_estimators=200; total time=   0.5s\n",
      "[CV] END max_depth=10, max_features=sqrt, min_samples_leaf=2, min_samples_split=2, n_estimators=200; total time=   0.5s\n",
      "[CV] END max_depth=10, max_features=sqrt, min_samples_leaf=2, min_samples_split=2, n_estimators=200; total time=   0.5s\n",
      "[CV] END max_depth=10, max_features=sqrt, min_samples_leaf=2, min_samples_split=2, n_estimators=200; total time=   0.5s\n",
      "[CV] END max_depth=10, max_features=sqrt, min_samples_leaf=2, min_samples_split=2, n_estimators=200; total time=   0.5s\n",
      "[CV] END max_depth=10, max_features=sqrt, min_samples_leaf=2, min_samples_split=2, n_estimators=200; total time=   0.5s\n",
      "[CV] END max_depth=10, max_features=sqrt, min_samples_leaf=2, min_samples_split=2, n_estimators=200; total time=   0.5s\n",
      "[CV] END max_depth=10, max_features=auto, min_samples_leaf=1, min_samples_split=5, n_estimators=700; total time=   2.4s\n",
      "[CV] END max_depth=10, max_features=auto, min_samples_leaf=1, min_samples_split=5, n_estimators=700; total time=   2.3s\n",
      "[CV] END max_depth=10, max_features=auto, min_samples_leaf=1, min_samples_split=5, n_estimators=700; total time=   2.3s\n",
      "[CV] END max_depth=10, max_features=auto, min_samples_leaf=1, min_samples_split=5, n_estimators=700; total time=   2.3s\n",
      "[CV] END max_depth=10, max_features=auto, min_samples_leaf=1, min_samples_split=5, n_estimators=700; total time=   2.3s\n",
      "[CV] END max_depth=10, max_features=auto, min_samples_leaf=1, min_samples_split=5, n_estimators=700; total time=   2.3s\n",
      "[CV] END max_depth=10, max_features=auto, min_samples_leaf=1, min_samples_split=5, n_estimators=700; total time=   2.3s\n",
      "[CV] END max_depth=10, max_features=auto, min_samples_leaf=1, min_samples_split=5, n_estimators=700; total time=   2.3s\n",
      "[CV] END max_depth=10, max_features=auto, min_samples_leaf=1, min_samples_split=5, n_estimators=700; total time=   2.3s\n",
      "[CV] END max_depth=10, max_features=auto, min_samples_leaf=1, min_samples_split=5, n_estimators=700; total time=   2.3s\n",
      "[CV] END max_depth=5, max_features=auto, min_samples_leaf=10, min_samples_split=100, n_estimators=1200; total time=   3.5s\n",
      "[CV] END max_depth=5, max_features=auto, min_samples_leaf=10, min_samples_split=100, n_estimators=1200; total time=   3.5s\n",
      "[CV] END max_depth=5, max_features=auto, min_samples_leaf=10, min_samples_split=100, n_estimators=1200; total time=   3.5s\n",
      "[CV] END max_depth=5, max_features=auto, min_samples_leaf=10, min_samples_split=100, n_estimators=1200; total time=   3.5s\n",
      "[CV] END max_depth=5, max_features=auto, min_samples_leaf=10, min_samples_split=100, n_estimators=1200; total time=   4.6s\n",
      "[CV] END max_depth=5, max_features=auto, min_samples_leaf=10, min_samples_split=100, n_estimators=1200; total time=   3.6s\n",
      "[CV] END max_depth=5, max_features=auto, min_samples_leaf=10, min_samples_split=100, n_estimators=1200; total time=   3.5s\n",
      "[CV] END max_depth=5, max_features=auto, min_samples_leaf=10, min_samples_split=100, n_estimators=1200; total time=   3.5s\n",
      "[CV] END max_depth=5, max_features=auto, min_samples_leaf=10, min_samples_split=100, n_estimators=1200; total time=   4.0s\n",
      "[CV] END max_depth=5, max_features=auto, min_samples_leaf=10, min_samples_split=100, n_estimators=1200; total time=   3.5s\n",
      "[CV] END max_depth=5, max_features=sqrt, min_samples_leaf=2, min_samples_split=10, n_estimators=800; total time=   2.3s\n",
      "[CV] END max_depth=5, max_features=sqrt, min_samples_leaf=2, min_samples_split=10, n_estimators=800; total time=   2.3s\n",
      "[CV] END max_depth=5, max_features=sqrt, min_samples_leaf=2, min_samples_split=10, n_estimators=800; total time=   2.3s\n",
      "[CV] END max_depth=5, max_features=sqrt, min_samples_leaf=2, min_samples_split=10, n_estimators=800; total time=   2.3s\n",
      "[CV] END max_depth=5, max_features=sqrt, min_samples_leaf=2, min_samples_split=10, n_estimators=800; total time=   2.5s\n",
      "[CV] END max_depth=5, max_features=sqrt, min_samples_leaf=2, min_samples_split=10, n_estimators=800; total time=   2.3s\n",
      "[CV] END max_depth=5, max_features=sqrt, min_samples_leaf=2, min_samples_split=10, n_estimators=800; total time=   2.3s\n",
      "[CV] END max_depth=5, max_features=sqrt, min_samples_leaf=2, min_samples_split=10, n_estimators=800; total time=   2.3s\n",
      "[CV] END max_depth=5, max_features=sqrt, min_samples_leaf=2, min_samples_split=10, n_estimators=800; total time=   2.3s\n",
      "[CV] END max_depth=5, max_features=sqrt, min_samples_leaf=2, min_samples_split=10, n_estimators=800; total time=   2.3s\n",
      "[CV] END max_depth=10, max_features=sqrt, min_samples_leaf=2, min_samples_split=100, n_estimators=1100; total time=   3.1s\n",
      "[CV] END max_depth=10, max_features=sqrt, min_samples_leaf=2, min_samples_split=100, n_estimators=1100; total time=   3.1s\n",
      "[CV] END max_depth=10, max_features=sqrt, min_samples_leaf=2, min_samples_split=100, n_estimators=1100; total time=   3.1s\n",
      "[CV] END max_depth=10, max_features=sqrt, min_samples_leaf=2, min_samples_split=100, n_estimators=1100; total time=   3.1s\n",
      "[CV] END max_depth=10, max_features=sqrt, min_samples_leaf=2, min_samples_split=100, n_estimators=1100; total time=   3.1s\n",
      "[CV] END max_depth=10, max_features=sqrt, min_samples_leaf=2, min_samples_split=100, n_estimators=1100; total time=   3.1s\n",
      "[CV] END max_depth=10, max_features=sqrt, min_samples_leaf=2, min_samples_split=100, n_estimators=1100; total time=   3.1s\n",
      "[CV] END max_depth=10, max_features=sqrt, min_samples_leaf=2, min_samples_split=100, n_estimators=1100; total time=   3.1s\n",
      "[CV] END max_depth=10, max_features=sqrt, min_samples_leaf=2, min_samples_split=100, n_estimators=1100; total time=   3.5s\n",
      "[CV] END max_depth=10, max_features=sqrt, min_samples_leaf=2, min_samples_split=100, n_estimators=1100; total time=   3.1s\n",
      "[CV] END max_depth=10, max_features=sqrt, min_samples_leaf=10, min_samples_split=100, n_estimators=500; total time=   1.4s\n",
      "[CV] END max_depth=10, max_features=sqrt, min_samples_leaf=10, min_samples_split=100, n_estimators=500; total time=   1.4s\n",
      "[CV] END max_depth=10, max_features=sqrt, min_samples_leaf=10, min_samples_split=100, n_estimators=500; total time=   1.4s\n",
      "[CV] END max_depth=10, max_features=sqrt, min_samples_leaf=10, min_samples_split=100, n_estimators=500; total time=   1.4s\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV] END max_depth=10, max_features=sqrt, min_samples_leaf=10, min_samples_split=100, n_estimators=500; total time=   1.4s\n",
      "[CV] END max_depth=10, max_features=sqrt, min_samples_leaf=10, min_samples_split=100, n_estimators=500; total time=   1.4s\n",
      "[CV] END max_depth=10, max_features=sqrt, min_samples_leaf=10, min_samples_split=100, n_estimators=500; total time=   1.4s\n",
      "[CV] END max_depth=10, max_features=sqrt, min_samples_leaf=10, min_samples_split=100, n_estimators=500; total time=   1.4s\n",
      "[CV] END max_depth=10, max_features=sqrt, min_samples_leaf=10, min_samples_split=100, n_estimators=500; total time=   1.4s\n",
      "[CV] END max_depth=10, max_features=sqrt, min_samples_leaf=10, min_samples_split=100, n_estimators=500; total time=   1.4s\n",
      "[CV] END max_depth=15, max_features=sqrt, min_samples_leaf=1, min_samples_split=5, n_estimators=1000; total time=   3.5s\n",
      "[CV] END max_depth=15, max_features=sqrt, min_samples_leaf=1, min_samples_split=5, n_estimators=1000; total time=   3.1s\n",
      "[CV] END max_depth=15, max_features=sqrt, min_samples_leaf=1, min_samples_split=5, n_estimators=1000; total time=   3.1s\n",
      "[CV] END max_depth=15, max_features=sqrt, min_samples_leaf=1, min_samples_split=5, n_estimators=1000; total time=   3.1s\n",
      "[CV] END max_depth=15, max_features=sqrt, min_samples_leaf=1, min_samples_split=5, n_estimators=1000; total time=   3.1s\n",
      "[CV] END max_depth=15, max_features=sqrt, min_samples_leaf=1, min_samples_split=5, n_estimators=1000; total time=   3.1s\n",
      "[CV] END max_depth=15, max_features=sqrt, min_samples_leaf=1, min_samples_split=5, n_estimators=1000; total time=   3.1s\n",
      "[CV] END max_depth=15, max_features=sqrt, min_samples_leaf=1, min_samples_split=5, n_estimators=1000; total time=   3.1s\n",
      "[CV] END max_depth=15, max_features=sqrt, min_samples_leaf=1, min_samples_split=5, n_estimators=1000; total time=   3.1s\n",
      "[CV] END max_depth=15, max_features=sqrt, min_samples_leaf=1, min_samples_split=5, n_estimators=1000; total time=   3.1s\n",
      "[CV] END max_depth=15, max_features=sqrt, min_samples_leaf=2, min_samples_split=2, n_estimators=1000; total time=   3.0s\n",
      "[CV] END max_depth=15, max_features=sqrt, min_samples_leaf=2, min_samples_split=2, n_estimators=1000; total time=   3.1s\n",
      "[CV] END max_depth=15, max_features=sqrt, min_samples_leaf=2, min_samples_split=2, n_estimators=1000; total time=   3.0s\n",
      "[CV] END max_depth=15, max_features=sqrt, min_samples_leaf=2, min_samples_split=2, n_estimators=1000; total time=   3.0s\n",
      "[CV] END max_depth=15, max_features=sqrt, min_samples_leaf=2, min_samples_split=2, n_estimators=1000; total time=   3.0s\n",
      "[CV] END max_depth=15, max_features=sqrt, min_samples_leaf=2, min_samples_split=2, n_estimators=1000; total time=   3.1s\n",
      "[CV] END max_depth=15, max_features=sqrt, min_samples_leaf=2, min_samples_split=2, n_estimators=1000; total time=   3.1s\n",
      "[CV] END max_depth=15, max_features=sqrt, min_samples_leaf=2, min_samples_split=2, n_estimators=1000; total time=   3.2s\n",
      "[CV] END max_depth=15, max_features=sqrt, min_samples_leaf=2, min_samples_split=2, n_estimators=1000; total time=   3.1s\n",
      "[CV] END max_depth=15, max_features=sqrt, min_samples_leaf=2, min_samples_split=2, n_estimators=1000; total time=   3.1s\n",
      "[CV] END max_depth=25, max_features=sqrt, min_samples_leaf=10, min_samples_split=10, n_estimators=1200; total time=   3.5s\n",
      "[CV] END max_depth=25, max_features=sqrt, min_samples_leaf=10, min_samples_split=10, n_estimators=1200; total time=   3.5s\n",
      "[CV] END max_depth=25, max_features=sqrt, min_samples_leaf=10, min_samples_split=10, n_estimators=1200; total time=   3.5s\n",
      "[CV] END max_depth=25, max_features=sqrt, min_samples_leaf=10, min_samples_split=10, n_estimators=1200; total time=   3.5s\n",
      "[CV] END max_depth=25, max_features=sqrt, min_samples_leaf=10, min_samples_split=10, n_estimators=1200; total time=   3.5s\n",
      "[CV] END max_depth=25, max_features=sqrt, min_samples_leaf=10, min_samples_split=10, n_estimators=1200; total time=   3.5s\n",
      "[CV] END max_depth=25, max_features=sqrt, min_samples_leaf=10, min_samples_split=10, n_estimators=1200; total time=   3.5s\n",
      "[CV] END max_depth=25, max_features=sqrt, min_samples_leaf=10, min_samples_split=10, n_estimators=1200; total time=   3.5s\n",
      "[CV] END max_depth=25, max_features=sqrt, min_samples_leaf=10, min_samples_split=10, n_estimators=1200; total time=   3.5s\n",
      "[CV] END max_depth=25, max_features=sqrt, min_samples_leaf=10, min_samples_split=10, n_estimators=1200; total time=   3.5s\n",
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=2, min_samples_split=15, n_estimators=300; total time=   0.8s\n",
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=2, min_samples_split=15, n_estimators=300; total time=   0.8s\n",
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=2, min_samples_split=15, n_estimators=300; total time=   0.8s\n",
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=2, min_samples_split=15, n_estimators=300; total time=   0.8s\n",
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=2, min_samples_split=15, n_estimators=300; total time=   0.8s\n",
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=2, min_samples_split=15, n_estimators=300; total time=   0.8s\n",
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=2, min_samples_split=15, n_estimators=300; total time=   0.8s\n",
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=2, min_samples_split=15, n_estimators=300; total time=   0.8s\n",
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=2, min_samples_split=15, n_estimators=300; total time=   0.8s\n",
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=2, min_samples_split=15, n_estimators=300; total time=   0.8s\n",
      "[CV] END max_depth=20, max_features=auto, min_samples_leaf=2, min_samples_split=5, n_estimators=600; total time=   2.0s\n",
      "[CV] END max_depth=20, max_features=auto, min_samples_leaf=2, min_samples_split=5, n_estimators=600; total time=   2.0s\n",
      "[CV] END max_depth=20, max_features=auto, min_samples_leaf=2, min_samples_split=5, n_estimators=600; total time=   2.0s\n",
      "[CV] END max_depth=20, max_features=auto, min_samples_leaf=2, min_samples_split=5, n_estimators=600; total time=   2.0s\n",
      "[CV] END max_depth=20, max_features=auto, min_samples_leaf=2, min_samples_split=5, n_estimators=600; total time=   2.0s\n",
      "[CV] END max_depth=20, max_features=auto, min_samples_leaf=2, min_samples_split=5, n_estimators=600; total time=   2.0s\n",
      "[CV] END max_depth=20, max_features=auto, min_samples_leaf=2, min_samples_split=5, n_estimators=600; total time=   2.0s\n",
      "[CV] END max_depth=20, max_features=auto, min_samples_leaf=2, min_samples_split=5, n_estimators=600; total time=   2.0s\n",
      "[CV] END max_depth=20, max_features=auto, min_samples_leaf=2, min_samples_split=5, n_estimators=600; total time=   2.0s\n",
      "[CV] END max_depth=20, max_features=auto, min_samples_leaf=2, min_samples_split=5, n_estimators=600; total time=   2.0s\n",
      "[CV] END max_depth=25, max_features=auto, min_samples_leaf=2, min_samples_split=5, n_estimators=1100; total time=   3.7s\n",
      "[CV] END max_depth=25, max_features=auto, min_samples_leaf=2, min_samples_split=5, n_estimators=1100; total time=   3.7s\n",
      "[CV] END max_depth=25, max_features=auto, min_samples_leaf=2, min_samples_split=5, n_estimators=1100; total time=   3.7s\n",
      "[CV] END max_depth=25, max_features=auto, min_samples_leaf=2, min_samples_split=5, n_estimators=1100; total time=   3.7s\n",
      "[CV] END max_depth=25, max_features=auto, min_samples_leaf=2, min_samples_split=5, n_estimators=1100; total time=   4.5s\n",
      "[CV] END max_depth=25, max_features=auto, min_samples_leaf=2, min_samples_split=5, n_estimators=1100; total time=   3.9s\n",
      "[CV] END max_depth=25, max_features=auto, min_samples_leaf=2, min_samples_split=5, n_estimators=1100; total time=   3.7s\n",
      "[CV] END max_depth=25, max_features=auto, min_samples_leaf=2, min_samples_split=5, n_estimators=1100; total time=   3.9s\n",
      "[CV] END max_depth=25, max_features=auto, min_samples_leaf=2, min_samples_split=5, n_estimators=1100; total time=   3.9s\n",
      "[CV] END max_depth=25, max_features=auto, min_samples_leaf=2, min_samples_split=5, n_estimators=1100; total time=   3.7s\n",
      "[CV] END max_depth=15, max_features=auto, min_samples_leaf=1, min_samples_split=100, n_estimators=300; total time=   0.8s\n",
      "[CV] END max_depth=15, max_features=auto, min_samples_leaf=1, min_samples_split=100, n_estimators=300; total time=   0.8s\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV] END max_depth=15, max_features=auto, min_samples_leaf=1, min_samples_split=100, n_estimators=300; total time=   0.8s\n",
      "[CV] END max_depth=15, max_features=auto, min_samples_leaf=1, min_samples_split=100, n_estimators=300; total time=   0.8s\n",
      "[CV] END max_depth=15, max_features=auto, min_samples_leaf=1, min_samples_split=100, n_estimators=300; total time=   0.8s\n",
      "[CV] END max_depth=15, max_features=auto, min_samples_leaf=1, min_samples_split=100, n_estimators=300; total time=   0.8s\n",
      "[CV] END max_depth=15, max_features=auto, min_samples_leaf=1, min_samples_split=100, n_estimators=300; total time=   0.8s\n",
      "[CV] END max_depth=15, max_features=auto, min_samples_leaf=1, min_samples_split=100, n_estimators=300; total time=   0.8s\n",
      "[CV] END max_depth=15, max_features=auto, min_samples_leaf=1, min_samples_split=100, n_estimators=300; total time=   0.8s\n",
      "[CV] END max_depth=15, max_features=auto, min_samples_leaf=1, min_samples_split=100, n_estimators=300; total time=   0.8s\n",
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=2, min_samples_split=5, n_estimators=100; total time=   0.2s\n",
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=2, min_samples_split=5, n_estimators=100; total time=   0.2s\n",
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=2, min_samples_split=5, n_estimators=100; total time=   0.2s\n",
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=2, min_samples_split=5, n_estimators=100; total time=   0.2s\n",
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=2, min_samples_split=5, n_estimators=100; total time=   0.2s\n",
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=2, min_samples_split=5, n_estimators=100; total time=   0.2s\n",
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=2, min_samples_split=5, n_estimators=100; total time=   0.2s\n",
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=2, min_samples_split=5, n_estimators=100; total time=   0.2s\n",
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=2, min_samples_split=5, n_estimators=100; total time=   0.2s\n",
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=2, min_samples_split=5, n_estimators=100; total time=   0.2s\n",
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=10, min_samples_split=100, n_estimators=700; total time=   2.0s\n",
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=10, min_samples_split=100, n_estimators=700; total time=   2.4s\n",
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=10, min_samples_split=100, n_estimators=700; total time=   2.0s\n",
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=10, min_samples_split=100, n_estimators=700; total time=   2.0s\n",
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=10, min_samples_split=100, n_estimators=700; total time=   2.0s\n",
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=10, min_samples_split=100, n_estimators=700; total time=   2.0s\n",
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=10, min_samples_split=100, n_estimators=700; total time=   2.0s\n",
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=10, min_samples_split=100, n_estimators=700; total time=   2.0s\n",
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=10, min_samples_split=100, n_estimators=700; total time=   2.0s\n",
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=10, min_samples_split=100, n_estimators=700; total time=   2.0s\n",
      "[CV] END max_depth=15, max_features=sqrt, min_samples_leaf=10, min_samples_split=100, n_estimators=200; total time=   0.5s\n",
      "[CV] END max_depth=15, max_features=sqrt, min_samples_leaf=10, min_samples_split=100, n_estimators=200; total time=   0.5s\n",
      "[CV] END max_depth=15, max_features=sqrt, min_samples_leaf=10, min_samples_split=100, n_estimators=200; total time=   0.5s\n",
      "[CV] END max_depth=15, max_features=sqrt, min_samples_leaf=10, min_samples_split=100, n_estimators=200; total time=   0.5s\n",
      "[CV] END max_depth=15, max_features=sqrt, min_samples_leaf=10, min_samples_split=100, n_estimators=200; total time=   0.5s\n",
      "[CV] END max_depth=15, max_features=sqrt, min_samples_leaf=10, min_samples_split=100, n_estimators=200; total time=   0.5s\n",
      "[CV] END max_depth=15, max_features=sqrt, min_samples_leaf=10, min_samples_split=100, n_estimators=200; total time=   0.5s\n",
      "[CV] END max_depth=15, max_features=sqrt, min_samples_leaf=10, min_samples_split=100, n_estimators=200; total time=   0.5s\n",
      "[CV] END max_depth=15, max_features=sqrt, min_samples_leaf=10, min_samples_split=100, n_estimators=200; total time=   0.5s\n",
      "[CV] END max_depth=15, max_features=sqrt, min_samples_leaf=10, min_samples_split=100, n_estimators=200; total time=   0.5s\n",
      "[CV] END max_depth=20, max_features=auto, min_samples_leaf=5, min_samples_split=2, n_estimators=500; total time=   1.6s\n",
      "[CV] END max_depth=20, max_features=auto, min_samples_leaf=5, min_samples_split=2, n_estimators=500; total time=   1.6s\n",
      "[CV] END max_depth=20, max_features=auto, min_samples_leaf=5, min_samples_split=2, n_estimators=500; total time=   1.6s\n",
      "[CV] END max_depth=20, max_features=auto, min_samples_leaf=5, min_samples_split=2, n_estimators=500; total time=   1.6s\n",
      "[CV] END max_depth=20, max_features=auto, min_samples_leaf=5, min_samples_split=2, n_estimators=500; total time=   1.6s\n",
      "[CV] END max_depth=20, max_features=auto, min_samples_leaf=5, min_samples_split=2, n_estimators=500; total time=   1.6s\n",
      "[CV] END max_depth=20, max_features=auto, min_samples_leaf=5, min_samples_split=2, n_estimators=500; total time=   1.6s\n",
      "[CV] END max_depth=20, max_features=auto, min_samples_leaf=5, min_samples_split=2, n_estimators=500; total time=   1.5s\n",
      "[CV] END max_depth=20, max_features=auto, min_samples_leaf=5, min_samples_split=2, n_estimators=500; total time=   1.6s\n",
      "[CV] END max_depth=20, max_features=auto, min_samples_leaf=5, min_samples_split=2, n_estimators=500; total time=   1.6s\n",
      "[CV] END max_depth=25, max_features=sqrt, min_samples_leaf=10, min_samples_split=10, n_estimators=900; total time=   2.6s\n",
      "[CV] END max_depth=25, max_features=sqrt, min_samples_leaf=10, min_samples_split=10, n_estimators=900; total time=   2.6s\n",
      "[CV] END max_depth=25, max_features=sqrt, min_samples_leaf=10, min_samples_split=10, n_estimators=900; total time=   2.6s\n",
      "[CV] END max_depth=25, max_features=sqrt, min_samples_leaf=10, min_samples_split=10, n_estimators=900; total time=   2.6s\n",
      "[CV] END max_depth=25, max_features=sqrt, min_samples_leaf=10, min_samples_split=10, n_estimators=900; total time=   2.6s\n",
      "[CV] END max_depth=25, max_features=sqrt, min_samples_leaf=10, min_samples_split=10, n_estimators=900; total time=   2.6s\n",
      "[CV] END max_depth=25, max_features=sqrt, min_samples_leaf=10, min_samples_split=10, n_estimators=900; total time=   2.6s\n",
      "[CV] END max_depth=25, max_features=sqrt, min_samples_leaf=10, min_samples_split=10, n_estimators=900; total time=   2.6s\n",
      "[CV] END max_depth=25, max_features=sqrt, min_samples_leaf=10, min_samples_split=10, n_estimators=900; total time=   2.6s\n",
      "[CV] END max_depth=25, max_features=sqrt, min_samples_leaf=10, min_samples_split=10, n_estimators=900; total time=   2.6s\n",
      "[CV] END max_depth=30, max_features=auto, min_samples_leaf=5, min_samples_split=15, n_estimators=1200; total time=   3.8s\n",
      "[CV] END max_depth=30, max_features=auto, min_samples_leaf=5, min_samples_split=15, n_estimators=1200; total time=   3.8s\n",
      "[CV] END max_depth=30, max_features=auto, min_samples_leaf=5, min_samples_split=15, n_estimators=1200; total time=   3.8s\n",
      "[CV] END max_depth=30, max_features=auto, min_samples_leaf=5, min_samples_split=15, n_estimators=1200; total time=   3.8s\n",
      "[CV] END max_depth=30, max_features=auto, min_samples_leaf=5, min_samples_split=15, n_estimators=1200; total time=   3.8s\n",
      "[CV] END max_depth=30, max_features=auto, min_samples_leaf=5, min_samples_split=15, n_estimators=1200; total time=   4.0s\n",
      "[CV] END max_depth=30, max_features=auto, min_samples_leaf=5, min_samples_split=15, n_estimators=1200; total time=   3.9s\n",
      "[CV] END max_depth=30, max_features=auto, min_samples_leaf=5, min_samples_split=15, n_estimators=1200; total time=   3.9s\n",
      "[CV] END max_depth=30, max_features=auto, min_samples_leaf=5, min_samples_split=15, n_estimators=1200; total time=   3.8s\n",
      "[CV] END max_depth=30, max_features=auto, min_samples_leaf=5, min_samples_split=15, n_estimators=1200; total time=   3.8s\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV] END max_depth=25, max_features=auto, min_samples_leaf=1, min_samples_split=10, n_estimators=900; total time=   2.9s\n",
      "[CV] END max_depth=25, max_features=auto, min_samples_leaf=1, min_samples_split=10, n_estimators=900; total time=   2.9s\n",
      "[CV] END max_depth=25, max_features=auto, min_samples_leaf=1, min_samples_split=10, n_estimators=900; total time=   3.0s\n",
      "[CV] END max_depth=25, max_features=auto, min_samples_leaf=1, min_samples_split=10, n_estimators=900; total time=   2.9s\n",
      "[CV] END max_depth=25, max_features=auto, min_samples_leaf=1, min_samples_split=10, n_estimators=900; total time=   2.9s\n",
      "[CV] END max_depth=25, max_features=auto, min_samples_leaf=1, min_samples_split=10, n_estimators=900; total time=   2.9s\n",
      "[CV] END max_depth=25, max_features=auto, min_samples_leaf=1, min_samples_split=10, n_estimators=900; total time=   2.9s\n",
      "[CV] END max_depth=25, max_features=auto, min_samples_leaf=1, min_samples_split=10, n_estimators=900; total time=   2.9s\n",
      "[CV] END max_depth=25, max_features=auto, min_samples_leaf=1, min_samples_split=10, n_estimators=900; total time=   2.9s\n",
      "[CV] END max_depth=25, max_features=auto, min_samples_leaf=1, min_samples_split=10, n_estimators=900; total time=   2.9s\n",
      "[CV] END max_depth=10, max_features=sqrt, min_samples_leaf=5, min_samples_split=5, n_estimators=600; total time=   1.7s\n",
      "[CV] END max_depth=10, max_features=sqrt, min_samples_leaf=5, min_samples_split=5, n_estimators=600; total time=   1.7s\n",
      "[CV] END max_depth=10, max_features=sqrt, min_samples_leaf=5, min_samples_split=5, n_estimators=600; total time=   1.7s\n",
      "[CV] END max_depth=10, max_features=sqrt, min_samples_leaf=5, min_samples_split=5, n_estimators=600; total time=   1.7s\n",
      "[CV] END max_depth=10, max_features=sqrt, min_samples_leaf=5, min_samples_split=5, n_estimators=600; total time=   1.7s\n",
      "[CV] END max_depth=10, max_features=sqrt, min_samples_leaf=5, min_samples_split=5, n_estimators=600; total time=   1.7s\n",
      "[CV] END max_depth=10, max_features=sqrt, min_samples_leaf=5, min_samples_split=5, n_estimators=600; total time=   1.7s\n",
      "[CV] END max_depth=10, max_features=sqrt, min_samples_leaf=5, min_samples_split=5, n_estimators=600; total time=   1.9s\n",
      "[CV] END max_depth=10, max_features=sqrt, min_samples_leaf=5, min_samples_split=5, n_estimators=600; total time=   1.7s\n",
      "[CV] END max_depth=10, max_features=sqrt, min_samples_leaf=5, min_samples_split=5, n_estimators=600; total time=   1.7s\n",
      "[CV] END max_depth=25, max_features=sqrt, min_samples_leaf=5, min_samples_split=5, n_estimators=800; total time=   2.3s\n",
      "[CV] END max_depth=25, max_features=sqrt, min_samples_leaf=5, min_samples_split=5, n_estimators=800; total time=   2.3s\n",
      "[CV] END max_depth=25, max_features=sqrt, min_samples_leaf=5, min_samples_split=5, n_estimators=800; total time=   2.3s\n",
      "[CV] END max_depth=25, max_features=sqrt, min_samples_leaf=5, min_samples_split=5, n_estimators=800; total time=   2.4s\n",
      "[CV] END max_depth=25, max_features=sqrt, min_samples_leaf=5, min_samples_split=5, n_estimators=800; total time=   2.3s\n",
      "[CV] END max_depth=25, max_features=sqrt, min_samples_leaf=5, min_samples_split=5, n_estimators=800; total time=   2.3s\n",
      "[CV] END max_depth=25, max_features=sqrt, min_samples_leaf=5, min_samples_split=5, n_estimators=800; total time=   2.4s\n",
      "[CV] END max_depth=25, max_features=sqrt, min_samples_leaf=5, min_samples_split=5, n_estimators=800; total time=   2.4s\n",
      "[CV] END max_depth=25, max_features=sqrt, min_samples_leaf=5, min_samples_split=5, n_estimators=800; total time=   2.3s\n",
      "[CV] END max_depth=25, max_features=sqrt, min_samples_leaf=5, min_samples_split=5, n_estimators=800; total time=   2.4s\n",
      "[CV] END max_depth=5, max_features=auto, min_samples_leaf=5, min_samples_split=2, n_estimators=500; total time=   1.5s\n",
      "[CV] END max_depth=5, max_features=auto, min_samples_leaf=5, min_samples_split=2, n_estimators=500; total time=   1.5s\n",
      "[CV] END max_depth=5, max_features=auto, min_samples_leaf=5, min_samples_split=2, n_estimators=500; total time=   1.5s\n",
      "[CV] END max_depth=5, max_features=auto, min_samples_leaf=5, min_samples_split=2, n_estimators=500; total time=   1.5s\n",
      "[CV] END max_depth=5, max_features=auto, min_samples_leaf=5, min_samples_split=2, n_estimators=500; total time=   1.6s\n",
      "[CV] END max_depth=5, max_features=auto, min_samples_leaf=5, min_samples_split=2, n_estimators=500; total time=   1.5s\n",
      "[CV] END max_depth=5, max_features=auto, min_samples_leaf=5, min_samples_split=2, n_estimators=500; total time=   1.5s\n",
      "[CV] END max_depth=5, max_features=auto, min_samples_leaf=5, min_samples_split=2, n_estimators=500; total time=   1.5s\n",
      "[CV] END max_depth=5, max_features=auto, min_samples_leaf=5, min_samples_split=2, n_estimators=500; total time=   1.5s\n",
      "[CV] END max_depth=5, max_features=auto, min_samples_leaf=5, min_samples_split=2, n_estimators=500; total time=   1.5s\n",
      "[CV] END max_depth=25, max_features=sqrt, min_samples_leaf=2, min_samples_split=100, n_estimators=800; total time=   2.2s\n",
      "[CV] END max_depth=25, max_features=sqrt, min_samples_leaf=2, min_samples_split=100, n_estimators=800; total time=   2.2s\n",
      "[CV] END max_depth=25, max_features=sqrt, min_samples_leaf=2, min_samples_split=100, n_estimators=800; total time=   2.4s\n",
      "[CV] END max_depth=25, max_features=sqrt, min_samples_leaf=2, min_samples_split=100, n_estimators=800; total time=   2.2s\n",
      "[CV] END max_depth=25, max_features=sqrt, min_samples_leaf=2, min_samples_split=100, n_estimators=800; total time=   2.3s\n",
      "[CV] END max_depth=25, max_features=sqrt, min_samples_leaf=2, min_samples_split=100, n_estimators=800; total time=   2.2s\n",
      "[CV] END max_depth=25, max_features=sqrt, min_samples_leaf=2, min_samples_split=100, n_estimators=800; total time=   2.2s\n",
      "[CV] END max_depth=25, max_features=sqrt, min_samples_leaf=2, min_samples_split=100, n_estimators=800; total time=   2.2s\n",
      "[CV] END max_depth=25, max_features=sqrt, min_samples_leaf=2, min_samples_split=100, n_estimators=800; total time=   2.2s\n",
      "[CV] END max_depth=25, max_features=sqrt, min_samples_leaf=2, min_samples_split=100, n_estimators=800; total time=   2.3s\n",
      "[CV] END max_depth=30, max_features=sqrt, min_samples_leaf=5, min_samples_split=2, n_estimators=1200; total time=   3.5s\n",
      "[CV] END max_depth=30, max_features=sqrt, min_samples_leaf=5, min_samples_split=2, n_estimators=1200; total time=   5.2s\n",
      "[CV] END max_depth=30, max_features=sqrt, min_samples_leaf=5, min_samples_split=2, n_estimators=1200; total time=   4.4s\n",
      "[CV] END max_depth=30, max_features=sqrt, min_samples_leaf=5, min_samples_split=2, n_estimators=1200; total time=   3.9s\n",
      "[CV] END max_depth=30, max_features=sqrt, min_samples_leaf=5, min_samples_split=2, n_estimators=1200; total time=   4.1s\n",
      "[CV] END max_depth=30, max_features=sqrt, min_samples_leaf=5, min_samples_split=2, n_estimators=1200; total time=   4.4s\n",
      "[CV] END max_depth=30, max_features=sqrt, min_samples_leaf=5, min_samples_split=2, n_estimators=1200; total time=   4.0s\n",
      "[CV] END max_depth=30, max_features=sqrt, min_samples_leaf=5, min_samples_split=2, n_estimators=1200; total time=   3.9s\n",
      "[CV] END max_depth=30, max_features=sqrt, min_samples_leaf=5, min_samples_split=2, n_estimators=1200; total time=   4.5s\n",
      "[CV] END max_depth=30, max_features=sqrt, min_samples_leaf=5, min_samples_split=2, n_estimators=1200; total time=   4.5s\n",
      "[CV] END max_depth=30, max_features=sqrt, min_samples_leaf=1, min_samples_split=10, n_estimators=600; total time=   2.0s\n",
      "[CV] END max_depth=30, max_features=sqrt, min_samples_leaf=1, min_samples_split=10, n_estimators=600; total time=   2.1s\n",
      "[CV] END max_depth=30, max_features=sqrt, min_samples_leaf=1, min_samples_split=10, n_estimators=600; total time=   2.0s\n",
      "[CV] END max_depth=30, max_features=sqrt, min_samples_leaf=1, min_samples_split=10, n_estimators=600; total time=   2.0s\n",
      "[CV] END max_depth=30, max_features=sqrt, min_samples_leaf=1, min_samples_split=10, n_estimators=600; total time=   2.1s\n",
      "[CV] END max_depth=30, max_features=sqrt, min_samples_leaf=1, min_samples_split=10, n_estimators=600; total time=   2.3s\n",
      "[CV] END max_depth=30, max_features=sqrt, min_samples_leaf=1, min_samples_split=10, n_estimators=600; total time=   2.0s\n",
      "[CV] END max_depth=30, max_features=sqrt, min_samples_leaf=1, min_samples_split=10, n_estimators=600; total time=   1.9s\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV] END max_depth=30, max_features=sqrt, min_samples_leaf=1, min_samples_split=10, n_estimators=600; total time=   1.8s\n",
      "[CV] END max_depth=30, max_features=sqrt, min_samples_leaf=1, min_samples_split=10, n_estimators=600; total time=   2.0s\n",
      "[CV] END max_depth=20, max_features=auto, min_samples_leaf=1, min_samples_split=10, n_estimators=900; total time=   3.2s\n",
      "[CV] END max_depth=20, max_features=auto, min_samples_leaf=1, min_samples_split=10, n_estimators=900; total time=   3.3s\n",
      "[CV] END max_depth=20, max_features=auto, min_samples_leaf=1, min_samples_split=10, n_estimators=900; total time=   3.5s\n",
      "[CV] END max_depth=20, max_features=auto, min_samples_leaf=1, min_samples_split=10, n_estimators=900; total time=   3.4s\n",
      "[CV] END max_depth=20, max_features=auto, min_samples_leaf=1, min_samples_split=10, n_estimators=900; total time=   3.5s\n",
      "[CV] END max_depth=20, max_features=auto, min_samples_leaf=1, min_samples_split=10, n_estimators=900; total time=   3.6s\n",
      "[CV] END max_depth=20, max_features=auto, min_samples_leaf=1, min_samples_split=10, n_estimators=900; total time=   3.4s\n",
      "[CV] END max_depth=20, max_features=auto, min_samples_leaf=1, min_samples_split=10, n_estimators=900; total time=   3.4s\n",
      "[CV] END max_depth=20, max_features=auto, min_samples_leaf=1, min_samples_split=10, n_estimators=900; total time=   3.4s\n",
      "[CV] END max_depth=20, max_features=auto, min_samples_leaf=1, min_samples_split=10, n_estimators=900; total time=   3.2s\n",
      "[CV] END max_depth=15, max_features=sqrt, min_samples_leaf=5, min_samples_split=2, n_estimators=200; total time=   0.5s\n",
      "[CV] END max_depth=15, max_features=sqrt, min_samples_leaf=5, min_samples_split=2, n_estimators=200; total time=   0.5s\n",
      "[CV] END max_depth=15, max_features=sqrt, min_samples_leaf=5, min_samples_split=2, n_estimators=200; total time=   0.5s\n",
      "[CV] END max_depth=15, max_features=sqrt, min_samples_leaf=5, min_samples_split=2, n_estimators=200; total time=   0.5s\n",
      "[CV] END max_depth=15, max_features=sqrt, min_samples_leaf=5, min_samples_split=2, n_estimators=200; total time=   0.5s\n",
      "[CV] END max_depth=15, max_features=sqrt, min_samples_leaf=5, min_samples_split=2, n_estimators=200; total time=   0.5s\n",
      "[CV] END max_depth=15, max_features=sqrt, min_samples_leaf=5, min_samples_split=2, n_estimators=200; total time=   0.5s\n",
      "[CV] END max_depth=15, max_features=sqrt, min_samples_leaf=5, min_samples_split=2, n_estimators=200; total time=   0.5s\n",
      "[CV] END max_depth=15, max_features=sqrt, min_samples_leaf=5, min_samples_split=2, n_estimators=200; total time=   0.5s\n",
      "[CV] END max_depth=15, max_features=sqrt, min_samples_leaf=5, min_samples_split=2, n_estimators=200; total time=   0.5s\n",
      "[CV] END max_depth=25, max_features=sqrt, min_samples_leaf=10, min_samples_split=10, n_estimators=700; total time=   2.1s\n",
      "[CV] END max_depth=25, max_features=sqrt, min_samples_leaf=10, min_samples_split=10, n_estimators=700; total time=   2.5s\n",
      "[CV] END max_depth=25, max_features=sqrt, min_samples_leaf=10, min_samples_split=10, n_estimators=700; total time=   2.5s\n",
      "[CV] END max_depth=25, max_features=sqrt, min_samples_leaf=10, min_samples_split=10, n_estimators=700; total time=   2.7s\n",
      "[CV] END max_depth=25, max_features=sqrt, min_samples_leaf=10, min_samples_split=10, n_estimators=700; total time=   2.7s\n",
      "[CV] END max_depth=25, max_features=sqrt, min_samples_leaf=10, min_samples_split=10, n_estimators=700; total time=   2.7s\n",
      "[CV] END max_depth=25, max_features=sqrt, min_samples_leaf=10, min_samples_split=10, n_estimators=700; total time=   2.4s\n",
      "[CV] END max_depth=25, max_features=sqrt, min_samples_leaf=10, min_samples_split=10, n_estimators=700; total time=   2.3s\n",
      "[CV] END max_depth=25, max_features=sqrt, min_samples_leaf=10, min_samples_split=10, n_estimators=700; total time=   2.3s\n",
      "[CV] END max_depth=25, max_features=sqrt, min_samples_leaf=10, min_samples_split=10, n_estimators=700; total time=   2.6s\n",
      "[CV] END max_depth=15, max_features=sqrt, min_samples_leaf=10, min_samples_split=10, n_estimators=200; total time=   0.6s\n",
      "[CV] END max_depth=15, max_features=sqrt, min_samples_leaf=10, min_samples_split=10, n_estimators=200; total time=   0.8s\n",
      "[CV] END max_depth=15, max_features=sqrt, min_samples_leaf=10, min_samples_split=10, n_estimators=200; total time=   0.6s\n",
      "[CV] END max_depth=15, max_features=sqrt, min_samples_leaf=10, min_samples_split=10, n_estimators=200; total time=   0.7s\n",
      "[CV] END max_depth=15, max_features=sqrt, min_samples_leaf=10, min_samples_split=10, n_estimators=200; total time=   0.6s\n",
      "[CV] END max_depth=15, max_features=sqrt, min_samples_leaf=10, min_samples_split=10, n_estimators=200; total time=   0.6s\n",
      "[CV] END max_depth=15, max_features=sqrt, min_samples_leaf=10, min_samples_split=10, n_estimators=200; total time=   0.6s\n",
      "[CV] END max_depth=15, max_features=sqrt, min_samples_leaf=10, min_samples_split=10, n_estimators=200; total time=   0.7s\n",
      "[CV] END max_depth=15, max_features=sqrt, min_samples_leaf=10, min_samples_split=10, n_estimators=200; total time=   0.6s\n",
      "[CV] END max_depth=15, max_features=sqrt, min_samples_leaf=10, min_samples_split=10, n_estimators=200; total time=   0.6s\n",
      "[CV] END max_depth=25, max_features=auto, min_samples_leaf=2, min_samples_split=100, n_estimators=200; total time=   0.6s\n",
      "[CV] END max_depth=25, max_features=auto, min_samples_leaf=2, min_samples_split=100, n_estimators=200; total time=   0.6s\n",
      "[CV] END max_depth=25, max_features=auto, min_samples_leaf=2, min_samples_split=100, n_estimators=200; total time=   0.6s\n",
      "[CV] END max_depth=25, max_features=auto, min_samples_leaf=2, min_samples_split=100, n_estimators=200; total time=   0.5s\n",
      "[CV] END max_depth=25, max_features=auto, min_samples_leaf=2, min_samples_split=100, n_estimators=200; total time=   0.6s\n",
      "[CV] END max_depth=25, max_features=auto, min_samples_leaf=2, min_samples_split=100, n_estimators=200; total time=   0.6s\n",
      "[CV] END max_depth=25, max_features=auto, min_samples_leaf=2, min_samples_split=100, n_estimators=200; total time=   0.5s\n",
      "[CV] END max_depth=25, max_features=auto, min_samples_leaf=2, min_samples_split=100, n_estimators=200; total time=   0.6s\n",
      "[CV] END max_depth=25, max_features=auto, min_samples_leaf=2, min_samples_split=100, n_estimators=200; total time=   0.6s\n",
      "[CV] END max_depth=25, max_features=auto, min_samples_leaf=2, min_samples_split=100, n_estimators=200; total time=   0.8s\n",
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=5, min_samples_split=2, n_estimators=400; total time=   1.5s\n",
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=5, min_samples_split=2, n_estimators=400; total time=   1.6s\n",
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=5, min_samples_split=2, n_estimators=400; total time=   1.5s\n",
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=5, min_samples_split=2, n_estimators=400; total time=   1.4s\n",
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=5, min_samples_split=2, n_estimators=400; total time=   1.4s\n",
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=5, min_samples_split=2, n_estimators=400; total time=   1.5s\n",
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=5, min_samples_split=2, n_estimators=400; total time=   1.4s\n",
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=5, min_samples_split=2, n_estimators=400; total time=   1.4s\n",
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=5, min_samples_split=2, n_estimators=400; total time=   1.3s\n",
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=5, min_samples_split=2, n_estimators=400; total time=   1.4s\n",
      "[CV] END max_depth=5, max_features=sqrt, min_samples_leaf=1, min_samples_split=100, n_estimators=900; total time=   3.8s\n",
      "[CV] END max_depth=5, max_features=sqrt, min_samples_leaf=1, min_samples_split=100, n_estimators=900; total time=   3.0s\n",
      "[CV] END max_depth=5, max_features=sqrt, min_samples_leaf=1, min_samples_split=100, n_estimators=900; total time=   4.9s\n",
      "[CV] END max_depth=5, max_features=sqrt, min_samples_leaf=1, min_samples_split=100, n_estimators=900; total time=   3.2s\n",
      "[CV] END max_depth=5, max_features=sqrt, min_samples_leaf=1, min_samples_split=100, n_estimators=900; total time=   3.5s\n",
      "[CV] END max_depth=5, max_features=sqrt, min_samples_leaf=1, min_samples_split=100, n_estimators=900; total time=   3.1s\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV] END max_depth=5, max_features=sqrt, min_samples_leaf=1, min_samples_split=100, n_estimators=900; total time=   2.9s\n",
      "[CV] END max_depth=5, max_features=sqrt, min_samples_leaf=1, min_samples_split=100, n_estimators=900; total time=   3.1s\n",
      "[CV] END max_depth=5, max_features=sqrt, min_samples_leaf=1, min_samples_split=100, n_estimators=900; total time=   2.8s\n",
      "[CV] END max_depth=5, max_features=sqrt, min_samples_leaf=1, min_samples_split=100, n_estimators=900; total time=   2.8s\n",
      "[CV] END max_depth=30, max_features=sqrt, min_samples_leaf=1, min_samples_split=100, n_estimators=900; total time=   2.9s\n",
      "[CV] END max_depth=30, max_features=sqrt, min_samples_leaf=1, min_samples_split=100, n_estimators=900; total time=   3.3s\n",
      "[CV] END max_depth=30, max_features=sqrt, min_samples_leaf=1, min_samples_split=100, n_estimators=900; total time=   3.3s\n",
      "[CV] END max_depth=30, max_features=sqrt, min_samples_leaf=1, min_samples_split=100, n_estimators=900; total time=   3.1s\n",
      "[CV] END max_depth=30, max_features=sqrt, min_samples_leaf=1, min_samples_split=100, n_estimators=900; total time=   3.8s\n",
      "[CV] END max_depth=30, max_features=sqrt, min_samples_leaf=1, min_samples_split=100, n_estimators=900; total time=   3.0s\n",
      "[CV] END max_depth=30, max_features=sqrt, min_samples_leaf=1, min_samples_split=100, n_estimators=900; total time=   3.0s\n",
      "[CV] END max_depth=30, max_features=sqrt, min_samples_leaf=1, min_samples_split=100, n_estimators=900; total time=   3.2s\n",
      "[CV] END max_depth=30, max_features=sqrt, min_samples_leaf=1, min_samples_split=100, n_estimators=900; total time=   3.1s\n",
      "[CV] END max_depth=30, max_features=sqrt, min_samples_leaf=1, min_samples_split=100, n_estimators=900; total time=   2.6s\n",
      "[CV] END max_depth=15, max_features=sqrt, min_samples_leaf=1, min_samples_split=5, n_estimators=200; total time=   0.9s\n",
      "[CV] END max_depth=15, max_features=sqrt, min_samples_leaf=1, min_samples_split=5, n_estimators=200; total time=   0.5s\n",
      "[CV] END max_depth=15, max_features=sqrt, min_samples_leaf=1, min_samples_split=5, n_estimators=200; total time=   0.5s\n",
      "[CV] END max_depth=15, max_features=sqrt, min_samples_leaf=1, min_samples_split=5, n_estimators=200; total time=   0.6s\n",
      "[CV] END max_depth=15, max_features=sqrt, min_samples_leaf=1, min_samples_split=5, n_estimators=200; total time=   0.5s\n",
      "[CV] END max_depth=15, max_features=sqrt, min_samples_leaf=1, min_samples_split=5, n_estimators=200; total time=   0.5s\n",
      "[CV] END max_depth=15, max_features=sqrt, min_samples_leaf=1, min_samples_split=5, n_estimators=200; total time=   0.5s\n",
      "[CV] END max_depth=15, max_features=sqrt, min_samples_leaf=1, min_samples_split=5, n_estimators=200; total time=   0.5s\n",
      "[CV] END max_depth=15, max_features=sqrt, min_samples_leaf=1, min_samples_split=5, n_estimators=200; total time=   0.5s\n",
      "[CV] END max_depth=15, max_features=sqrt, min_samples_leaf=1, min_samples_split=5, n_estimators=200; total time=   0.5s\n",
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=5, min_samples_split=100, n_estimators=300; total time=   0.8s\n",
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=5, min_samples_split=100, n_estimators=300; total time=   0.8s\n",
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=5, min_samples_split=100, n_estimators=300; total time=   0.8s\n",
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=5, min_samples_split=100, n_estimators=300; total time=   0.8s\n",
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=5, min_samples_split=100, n_estimators=300; total time=   0.8s\n",
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=5, min_samples_split=100, n_estimators=300; total time=   0.8s\n",
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=5, min_samples_split=100, n_estimators=300; total time=   0.8s\n",
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=5, min_samples_split=100, n_estimators=300; total time=   0.8s\n",
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=5, min_samples_split=100, n_estimators=300; total time=   0.8s\n",
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=5, min_samples_split=100, n_estimators=300; total time=   0.8s\n",
      "[CV] END max_depth=30, max_features=sqrt, min_samples_leaf=1, min_samples_split=10, n_estimators=400; total time=   1.1s\n",
      "[CV] END max_depth=30, max_features=sqrt, min_samples_leaf=1, min_samples_split=10, n_estimators=400; total time=   1.1s\n",
      "[CV] END max_depth=30, max_features=sqrt, min_samples_leaf=1, min_samples_split=10, n_estimators=400; total time=   1.1s\n",
      "[CV] END max_depth=30, max_features=sqrt, min_samples_leaf=1, min_samples_split=10, n_estimators=400; total time=   1.1s\n",
      "[CV] END max_depth=30, max_features=sqrt, min_samples_leaf=1, min_samples_split=10, n_estimators=400; total time=   1.1s\n",
      "[CV] END max_depth=30, max_features=sqrt, min_samples_leaf=1, min_samples_split=10, n_estimators=400; total time=   1.1s\n",
      "[CV] END max_depth=30, max_features=sqrt, min_samples_leaf=1, min_samples_split=10, n_estimators=400; total time=   1.1s\n",
      "[CV] END max_depth=30, max_features=sqrt, min_samples_leaf=1, min_samples_split=10, n_estimators=400; total time=   1.1s\n",
      "[CV] END max_depth=30, max_features=sqrt, min_samples_leaf=1, min_samples_split=10, n_estimators=400; total time=   1.1s\n",
      "[CV] END max_depth=30, max_features=sqrt, min_samples_leaf=1, min_samples_split=10, n_estimators=400; total time=   1.1s\n",
      "[CV] END max_depth=20, max_features=auto, min_samples_leaf=5, min_samples_split=10, n_estimators=300; total time=   1.0s\n",
      "[CV] END max_depth=20, max_features=auto, min_samples_leaf=5, min_samples_split=10, n_estimators=300; total time=   1.0s\n",
      "[CV] END max_depth=20, max_features=auto, min_samples_leaf=5, min_samples_split=10, n_estimators=300; total time=   0.9s\n",
      "[CV] END max_depth=20, max_features=auto, min_samples_leaf=5, min_samples_split=10, n_estimators=300; total time=   0.9s\n",
      "[CV] END max_depth=20, max_features=auto, min_samples_leaf=5, min_samples_split=10, n_estimators=300; total time=   0.9s\n",
      "[CV] END max_depth=20, max_features=auto, min_samples_leaf=5, min_samples_split=10, n_estimators=300; total time=   0.9s\n",
      "[CV] END max_depth=20, max_features=auto, min_samples_leaf=5, min_samples_split=10, n_estimators=300; total time=   0.9s\n",
      "[CV] END max_depth=20, max_features=auto, min_samples_leaf=5, min_samples_split=10, n_estimators=300; total time=   0.9s\n",
      "[CV] END max_depth=20, max_features=auto, min_samples_leaf=5, min_samples_split=10, n_estimators=300; total time=   0.9s\n",
      "[CV] END max_depth=20, max_features=auto, min_samples_leaf=5, min_samples_split=10, n_estimators=300; total time=   0.9s\n",
      "[CV] END max_depth=30, max_features=sqrt, min_samples_leaf=2, min_samples_split=5, n_estimators=200; total time=   0.5s\n",
      "[CV] END max_depth=30, max_features=sqrt, min_samples_leaf=2, min_samples_split=5, n_estimators=200; total time=   0.5s\n",
      "[CV] END max_depth=30, max_features=sqrt, min_samples_leaf=2, min_samples_split=5, n_estimators=200; total time=   0.5s\n",
      "[CV] END max_depth=30, max_features=sqrt, min_samples_leaf=2, min_samples_split=5, n_estimators=200; total time=   0.5s\n",
      "[CV] END max_depth=30, max_features=sqrt, min_samples_leaf=2, min_samples_split=5, n_estimators=200; total time=   0.5s\n",
      "[CV] END max_depth=30, max_features=sqrt, min_samples_leaf=2, min_samples_split=5, n_estimators=200; total time=   0.5s\n",
      "[CV] END max_depth=30, max_features=sqrt, min_samples_leaf=2, min_samples_split=5, n_estimators=200; total time=   0.5s\n",
      "[CV] END max_depth=30, max_features=sqrt, min_samples_leaf=2, min_samples_split=5, n_estimators=200; total time=   0.5s\n",
      "[CV] END max_depth=30, max_features=sqrt, min_samples_leaf=2, min_samples_split=5, n_estimators=200; total time=   0.5s\n",
      "[CV] END max_depth=30, max_features=sqrt, min_samples_leaf=2, min_samples_split=5, n_estimators=200; total time=   0.5s\n",
      "[CV] END max_depth=30, max_features=sqrt, min_samples_leaf=5, min_samples_split=10, n_estimators=400; total time=   1.2s\n",
      "[CV] END max_depth=30, max_features=sqrt, min_samples_leaf=5, min_samples_split=10, n_estimators=400; total time=   1.2s\n",
      "[CV] END max_depth=30, max_features=sqrt, min_samples_leaf=5, min_samples_split=10, n_estimators=400; total time=   1.3s\n",
      "[CV] END max_depth=30, max_features=sqrt, min_samples_leaf=5, min_samples_split=10, n_estimators=400; total time=   1.1s\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV] END max_depth=30, max_features=sqrt, min_samples_leaf=5, min_samples_split=10, n_estimators=400; total time=   1.2s\n",
      "[CV] END max_depth=30, max_features=sqrt, min_samples_leaf=5, min_samples_split=10, n_estimators=400; total time=   1.1s\n",
      "[CV] END max_depth=30, max_features=sqrt, min_samples_leaf=5, min_samples_split=10, n_estimators=400; total time=   1.1s\n",
      "[CV] END max_depth=30, max_features=sqrt, min_samples_leaf=5, min_samples_split=10, n_estimators=400; total time=   1.1s\n",
      "[CV] END max_depth=30, max_features=sqrt, min_samples_leaf=5, min_samples_split=10, n_estimators=400; total time=   1.5s\n",
      "[CV] END max_depth=30, max_features=sqrt, min_samples_leaf=5, min_samples_split=10, n_estimators=400; total time=   1.4s\n",
      "[CV] END max_depth=10, max_features=sqrt, min_samples_leaf=10, min_samples_split=2, n_estimators=1200; total time=   3.8s\n",
      "[CV] END max_depth=10, max_features=sqrt, min_samples_leaf=10, min_samples_split=2, n_estimators=1200; total time=   3.5s\n",
      "[CV] END max_depth=10, max_features=sqrt, min_samples_leaf=10, min_samples_split=2, n_estimators=1200; total time=   4.0s\n",
      "[CV] END max_depth=10, max_features=sqrt, min_samples_leaf=10, min_samples_split=2, n_estimators=1200; total time=   3.9s\n",
      "[CV] END max_depth=10, max_features=sqrt, min_samples_leaf=10, min_samples_split=2, n_estimators=1200; total time=   3.9s\n",
      "[CV] END max_depth=10, max_features=sqrt, min_samples_leaf=10, min_samples_split=2, n_estimators=1200; total time=   3.9s\n",
      "[CV] END max_depth=10, max_features=sqrt, min_samples_leaf=10, min_samples_split=2, n_estimators=1200; total time=   4.1s\n",
      "[CV] END max_depth=10, max_features=sqrt, min_samples_leaf=10, min_samples_split=2, n_estimators=1200; total time=   3.9s\n",
      "[CV] END max_depth=10, max_features=sqrt, min_samples_leaf=10, min_samples_split=2, n_estimators=1200; total time=   3.9s\n",
      "[CV] END max_depth=10, max_features=sqrt, min_samples_leaf=10, min_samples_split=2, n_estimators=1200; total time=   4.0s\n",
      "[CV] END max_depth=10, max_features=auto, min_samples_leaf=2, min_samples_split=10, n_estimators=100; total time=   0.3s\n",
      "[CV] END max_depth=10, max_features=auto, min_samples_leaf=2, min_samples_split=10, n_estimators=100; total time=   0.3s\n",
      "[CV] END max_depth=10, max_features=auto, min_samples_leaf=2, min_samples_split=10, n_estimators=100; total time=   0.3s\n",
      "[CV] END max_depth=10, max_features=auto, min_samples_leaf=2, min_samples_split=10, n_estimators=100; total time=   0.3s\n",
      "[CV] END max_depth=10, max_features=auto, min_samples_leaf=2, min_samples_split=10, n_estimators=100; total time=   0.3s\n",
      "[CV] END max_depth=10, max_features=auto, min_samples_leaf=2, min_samples_split=10, n_estimators=100; total time=   0.3s\n",
      "[CV] END max_depth=10, max_features=auto, min_samples_leaf=2, min_samples_split=10, n_estimators=100; total time=   0.3s\n",
      "[CV] END max_depth=10, max_features=auto, min_samples_leaf=2, min_samples_split=10, n_estimators=100; total time=   0.3s\n",
      "[CV] END max_depth=10, max_features=auto, min_samples_leaf=2, min_samples_split=10, n_estimators=100; total time=   0.3s\n",
      "[CV] END max_depth=10, max_features=auto, min_samples_leaf=2, min_samples_split=10, n_estimators=100; total time=   0.3s\n",
      "[CV] END max_depth=30, max_features=auto, min_samples_leaf=2, min_samples_split=2, n_estimators=200; total time=   0.6s\n",
      "[CV] END max_depth=30, max_features=auto, min_samples_leaf=2, min_samples_split=2, n_estimators=200; total time=   0.6s\n",
      "[CV] END max_depth=30, max_features=auto, min_samples_leaf=2, min_samples_split=2, n_estimators=200; total time=   0.7s\n",
      "[CV] END max_depth=30, max_features=auto, min_samples_leaf=2, min_samples_split=2, n_estimators=200; total time=   0.7s\n",
      "[CV] END max_depth=30, max_features=auto, min_samples_leaf=2, min_samples_split=2, n_estimators=200; total time=   0.7s\n",
      "[CV] END max_depth=30, max_features=auto, min_samples_leaf=2, min_samples_split=2, n_estimators=200; total time=   0.7s\n",
      "[CV] END max_depth=30, max_features=auto, min_samples_leaf=2, min_samples_split=2, n_estimators=200; total time=   0.7s\n",
      "[CV] END max_depth=30, max_features=auto, min_samples_leaf=2, min_samples_split=2, n_estimators=200; total time=   0.7s\n",
      "[CV] END max_depth=30, max_features=auto, min_samples_leaf=2, min_samples_split=2, n_estimators=200; total time=   0.7s\n",
      "[CV] END max_depth=30, max_features=auto, min_samples_leaf=2, min_samples_split=2, n_estimators=200; total time=   0.7s\n",
      "[CV] END max_depth=15, max_features=sqrt, min_samples_leaf=10, min_samples_split=5, n_estimators=400; total time=   1.3s\n",
      "[CV] END max_depth=15, max_features=sqrt, min_samples_leaf=10, min_samples_split=5, n_estimators=400; total time=   1.3s\n",
      "[CV] END max_depth=15, max_features=sqrt, min_samples_leaf=10, min_samples_split=5, n_estimators=400; total time=   1.2s\n",
      "[CV] END max_depth=15, max_features=sqrt, min_samples_leaf=10, min_samples_split=5, n_estimators=400; total time=   1.3s\n",
      "[CV] END max_depth=15, max_features=sqrt, min_samples_leaf=10, min_samples_split=5, n_estimators=400; total time=   1.1s\n",
      "[CV] END max_depth=15, max_features=sqrt, min_samples_leaf=10, min_samples_split=5, n_estimators=400; total time=   1.1s\n",
      "[CV] END max_depth=15, max_features=sqrt, min_samples_leaf=10, min_samples_split=5, n_estimators=400; total time=   1.2s\n",
      "[CV] END max_depth=15, max_features=sqrt, min_samples_leaf=10, min_samples_split=5, n_estimators=400; total time=   1.2s\n",
      "[CV] END max_depth=15, max_features=sqrt, min_samples_leaf=10, min_samples_split=5, n_estimators=400; total time=   1.2s\n",
      "[CV] END max_depth=15, max_features=sqrt, min_samples_leaf=10, min_samples_split=5, n_estimators=400; total time=   1.3s\n",
      "[CV] END max_depth=15, max_features=auto, min_samples_leaf=1, min_samples_split=15, n_estimators=1000; total time=   3.6s\n",
      "[CV] END max_depth=15, max_features=auto, min_samples_leaf=1, min_samples_split=15, n_estimators=1000; total time=   3.3s\n",
      "[CV] END max_depth=15, max_features=auto, min_samples_leaf=1, min_samples_split=15, n_estimators=1000; total time=   3.3s\n",
      "[CV] END max_depth=15, max_features=auto, min_samples_leaf=1, min_samples_split=15, n_estimators=1000; total time=   3.5s\n",
      "[CV] END max_depth=15, max_features=auto, min_samples_leaf=1, min_samples_split=15, n_estimators=1000; total time=   3.5s\n",
      "[CV] END max_depth=15, max_features=auto, min_samples_leaf=1, min_samples_split=15, n_estimators=1000; total time=   3.4s\n",
      "[CV] END max_depth=15, max_features=auto, min_samples_leaf=1, min_samples_split=15, n_estimators=1000; total time=   3.5s\n",
      "[CV] END max_depth=15, max_features=auto, min_samples_leaf=1, min_samples_split=15, n_estimators=1000; total time=   3.6s\n",
      "[CV] END max_depth=15, max_features=auto, min_samples_leaf=1, min_samples_split=15, n_estimators=1000; total time=   3.5s\n",
      "[CV] END max_depth=15, max_features=auto, min_samples_leaf=1, min_samples_split=15, n_estimators=1000; total time=   3.2s\n",
      "[CV] END max_depth=5, max_features=sqrt, min_samples_leaf=10, min_samples_split=100, n_estimators=1100; total time=   3.6s\n",
      "[CV] END max_depth=5, max_features=sqrt, min_samples_leaf=10, min_samples_split=100, n_estimators=1100; total time=   3.5s\n",
      "[CV] END max_depth=5, max_features=sqrt, min_samples_leaf=10, min_samples_split=100, n_estimators=1100; total time=   3.4s\n",
      "[CV] END max_depth=5, max_features=sqrt, min_samples_leaf=10, min_samples_split=100, n_estimators=1100; total time=   3.4s\n",
      "[CV] END max_depth=5, max_features=sqrt, min_samples_leaf=10, min_samples_split=100, n_estimators=1100; total time=   3.4s\n",
      "[CV] END max_depth=5, max_features=sqrt, min_samples_leaf=10, min_samples_split=100, n_estimators=1100; total time=   3.5s\n",
      "[CV] END max_depth=5, max_features=sqrt, min_samples_leaf=10, min_samples_split=100, n_estimators=1100; total time=   3.5s\n",
      "[CV] END max_depth=5, max_features=sqrt, min_samples_leaf=10, min_samples_split=100, n_estimators=1100; total time=   3.5s\n",
      "[CV] END max_depth=5, max_features=sqrt, min_samples_leaf=10, min_samples_split=100, n_estimators=1100; total time=   3.4s\n",
      "[CV] END max_depth=5, max_features=sqrt, min_samples_leaf=10, min_samples_split=100, n_estimators=1100; total time=   3.6s\n",
      "[CV] END max_depth=30, max_features=auto, min_samples_leaf=5, min_samples_split=100, n_estimators=900; total time=   3.0s\n",
      "[CV] END max_depth=30, max_features=auto, min_samples_leaf=5, min_samples_split=100, n_estimators=900; total time=   3.3s\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV] END max_depth=30, max_features=auto, min_samples_leaf=5, min_samples_split=100, n_estimators=900; total time=   3.0s\n",
      "[CV] END max_depth=30, max_features=auto, min_samples_leaf=5, min_samples_split=100, n_estimators=900; total time=   3.0s\n",
      "[CV] END max_depth=30, max_features=auto, min_samples_leaf=5, min_samples_split=100, n_estimators=900; total time=   2.7s\n",
      "[CV] END max_depth=30, max_features=auto, min_samples_leaf=5, min_samples_split=100, n_estimators=900; total time=   3.0s\n",
      "[CV] END max_depth=30, max_features=auto, min_samples_leaf=5, min_samples_split=100, n_estimators=900; total time=   2.9s\n",
      "[CV] END max_depth=30, max_features=auto, min_samples_leaf=5, min_samples_split=100, n_estimators=900; total time=   3.0s\n",
      "[CV] END max_depth=30, max_features=auto, min_samples_leaf=5, min_samples_split=100, n_estimators=900; total time=   3.1s\n",
      "[CV] END max_depth=30, max_features=auto, min_samples_leaf=5, min_samples_split=100, n_estimators=900; total time=   3.1s\n",
      "[CV] END max_depth=15, max_features=sqrt, min_samples_leaf=5, min_samples_split=100, n_estimators=300; total time=   0.8s\n",
      "[CV] END max_depth=15, max_features=sqrt, min_samples_leaf=5, min_samples_split=100, n_estimators=300; total time=   0.9s\n",
      "[CV] END max_depth=15, max_features=sqrt, min_samples_leaf=5, min_samples_split=100, n_estimators=300; total time=   0.9s\n",
      "[CV] END max_depth=15, max_features=sqrt, min_samples_leaf=5, min_samples_split=100, n_estimators=300; total time=   1.2s\n",
      "[CV] END max_depth=15, max_features=sqrt, min_samples_leaf=5, min_samples_split=100, n_estimators=300; total time=   1.9s\n",
      "[CV] END max_depth=15, max_features=sqrt, min_samples_leaf=5, min_samples_split=100, n_estimators=300; total time=   1.9s\n",
      "[CV] END max_depth=15, max_features=sqrt, min_samples_leaf=5, min_samples_split=100, n_estimators=300; total time=   0.9s\n",
      "[CV] END max_depth=15, max_features=sqrt, min_samples_leaf=5, min_samples_split=100, n_estimators=300; total time=   1.1s\n",
      "[CV] END max_depth=15, max_features=sqrt, min_samples_leaf=5, min_samples_split=100, n_estimators=300; total time=   0.9s\n",
      "[CV] END max_depth=15, max_features=sqrt, min_samples_leaf=5, min_samples_split=100, n_estimators=300; total time=   0.9s\n",
      "[CV] END max_depth=10, max_features=sqrt, min_samples_leaf=1, min_samples_split=15, n_estimators=1200; total time=   4.8s\n",
      "[CV] END max_depth=10, max_features=sqrt, min_samples_leaf=1, min_samples_split=15, n_estimators=1200; total time=   3.7s\n",
      "[CV] END max_depth=10, max_features=sqrt, min_samples_leaf=1, min_samples_split=15, n_estimators=1200; total time=   3.5s\n",
      "[CV] END max_depth=10, max_features=sqrt, min_samples_leaf=1, min_samples_split=15, n_estimators=1200; total time=   3.5s\n",
      "[CV] END max_depth=10, max_features=sqrt, min_samples_leaf=1, min_samples_split=15, n_estimators=1200; total time=   3.8s\n",
      "[CV] END max_depth=10, max_features=sqrt, min_samples_leaf=1, min_samples_split=15, n_estimators=1200; total time=   5.3s\n",
      "[CV] END max_depth=10, max_features=sqrt, min_samples_leaf=1, min_samples_split=15, n_estimators=1200; total time=   4.7s\n",
      "[CV] END max_depth=10, max_features=sqrt, min_samples_leaf=1, min_samples_split=15, n_estimators=1200; total time=   4.0s\n",
      "[CV] END max_depth=10, max_features=sqrt, min_samples_leaf=1, min_samples_split=15, n_estimators=1200; total time=   4.6s\n",
      "[CV] END max_depth=10, max_features=sqrt, min_samples_leaf=1, min_samples_split=15, n_estimators=1200; total time=   4.4s\n",
      "[CV] END max_depth=10, max_features=sqrt, min_samples_leaf=1, min_samples_split=5, n_estimators=1000; total time=   3.6s\n",
      "[CV] END max_depth=10, max_features=sqrt, min_samples_leaf=1, min_samples_split=5, n_estimators=1000; total time=   3.8s\n",
      "[CV] END max_depth=10, max_features=sqrt, min_samples_leaf=1, min_samples_split=5, n_estimators=1000; total time=   4.1s\n",
      "[CV] END max_depth=10, max_features=sqrt, min_samples_leaf=1, min_samples_split=5, n_estimators=1000; total time=   3.0s\n",
      "[CV] END max_depth=10, max_features=sqrt, min_samples_leaf=1, min_samples_split=5, n_estimators=1000; total time=   3.5s\n",
      "[CV] END max_depth=10, max_features=sqrt, min_samples_leaf=1, min_samples_split=5, n_estimators=1000; total time=   3.0s\n",
      "[CV] END max_depth=10, max_features=sqrt, min_samples_leaf=1, min_samples_split=5, n_estimators=1000; total time=   3.0s\n",
      "[CV] END max_depth=10, max_features=sqrt, min_samples_leaf=1, min_samples_split=5, n_estimators=1000; total time=   3.0s\n",
      "[CV] END max_depth=10, max_features=sqrt, min_samples_leaf=1, min_samples_split=5, n_estimators=1000; total time=   3.0s\n",
      "[CV] END max_depth=10, max_features=sqrt, min_samples_leaf=1, min_samples_split=5, n_estimators=1000; total time=   3.2s\n",
      "[CV] END max_depth=5, max_features=auto, min_samples_leaf=5, min_samples_split=15, n_estimators=700; total time=   2.1s\n",
      "[CV] END max_depth=5, max_features=auto, min_samples_leaf=5, min_samples_split=15, n_estimators=700; total time=   2.1s\n",
      "[CV] END max_depth=5, max_features=auto, min_samples_leaf=5, min_samples_split=15, n_estimators=700; total time=   2.1s\n",
      "[CV] END max_depth=5, max_features=auto, min_samples_leaf=5, min_samples_split=15, n_estimators=700; total time=   2.1s\n",
      "[CV] END max_depth=5, max_features=auto, min_samples_leaf=5, min_samples_split=15, n_estimators=700; total time=   2.1s\n",
      "[CV] END max_depth=5, max_features=auto, min_samples_leaf=5, min_samples_split=15, n_estimators=700; total time=   2.1s\n",
      "[CV] END max_depth=5, max_features=auto, min_samples_leaf=5, min_samples_split=15, n_estimators=700; total time=   2.4s\n",
      "[CV] END max_depth=5, max_features=auto, min_samples_leaf=5, min_samples_split=15, n_estimators=700; total time=   2.4s\n",
      "[CV] END max_depth=5, max_features=auto, min_samples_leaf=5, min_samples_split=15, n_estimators=700; total time=   2.1s\n",
      "[CV] END max_depth=5, max_features=auto, min_samples_leaf=5, min_samples_split=15, n_estimators=700; total time=   2.1s\n",
      "[CV] END max_depth=25, max_features=sqrt, min_samples_leaf=2, min_samples_split=2, n_estimators=200; total time=   0.5s\n",
      "[CV] END max_depth=25, max_features=sqrt, min_samples_leaf=2, min_samples_split=2, n_estimators=200; total time=   0.5s\n",
      "[CV] END max_depth=25, max_features=sqrt, min_samples_leaf=2, min_samples_split=2, n_estimators=200; total time=   0.5s\n",
      "[CV] END max_depth=25, max_features=sqrt, min_samples_leaf=2, min_samples_split=2, n_estimators=200; total time=   0.6s\n",
      "[CV] END max_depth=25, max_features=sqrt, min_samples_leaf=2, min_samples_split=2, n_estimators=200; total time=   0.5s\n",
      "[CV] END max_depth=25, max_features=sqrt, min_samples_leaf=2, min_samples_split=2, n_estimators=200; total time=   0.5s\n",
      "[CV] END max_depth=25, max_features=sqrt, min_samples_leaf=2, min_samples_split=2, n_estimators=200; total time=   0.5s\n",
      "[CV] END max_depth=25, max_features=sqrt, min_samples_leaf=2, min_samples_split=2, n_estimators=200; total time=   0.5s\n",
      "[CV] END max_depth=25, max_features=sqrt, min_samples_leaf=2, min_samples_split=2, n_estimators=200; total time=   0.5s\n",
      "[CV] END max_depth=25, max_features=sqrt, min_samples_leaf=2, min_samples_split=2, n_estimators=200; total time=   0.5s\n",
      "[CV] END max_depth=30, max_features=auto, min_samples_leaf=1, min_samples_split=5, n_estimators=700; total time=   2.3s\n",
      "[CV] END max_depth=30, max_features=auto, min_samples_leaf=1, min_samples_split=5, n_estimators=700; total time=   2.3s\n",
      "[CV] END max_depth=30, max_features=auto, min_samples_leaf=1, min_samples_split=5, n_estimators=700; total time=   2.3s\n",
      "[CV] END max_depth=30, max_features=auto, min_samples_leaf=1, min_samples_split=5, n_estimators=700; total time=   2.3s\n",
      "[CV] END max_depth=30, max_features=auto, min_samples_leaf=1, min_samples_split=5, n_estimators=700; total time=   2.3s\n",
      "[CV] END max_depth=30, max_features=auto, min_samples_leaf=1, min_samples_split=5, n_estimators=700; total time=   2.3s\n",
      "[CV] END max_depth=30, max_features=auto, min_samples_leaf=1, min_samples_split=5, n_estimators=700; total time=   2.3s\n",
      "[CV] END max_depth=30, max_features=auto, min_samples_leaf=1, min_samples_split=5, n_estimators=700; total time=   2.6s\n",
      "[CV] END max_depth=30, max_features=auto, min_samples_leaf=1, min_samples_split=5, n_estimators=700; total time=   2.7s\n",
      "[CV] END max_depth=30, max_features=auto, min_samples_leaf=1, min_samples_split=5, n_estimators=700; total time=   2.3s\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=10, min_samples_split=100, n_estimators=500; total time=   1.4s\n",
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=10, min_samples_split=100, n_estimators=500; total time=   1.4s\n",
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=10, min_samples_split=100, n_estimators=500; total time=   1.3s\n",
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=10, min_samples_split=100, n_estimators=500; total time=   1.4s\n",
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=10, min_samples_split=100, n_estimators=500; total time=   1.4s\n",
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=10, min_samples_split=100, n_estimators=500; total time=   1.4s\n",
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=10, min_samples_split=100, n_estimators=500; total time=   1.4s\n",
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=10, min_samples_split=100, n_estimators=500; total time=   1.4s\n",
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=10, min_samples_split=100, n_estimators=500; total time=   1.3s\n",
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=10, min_samples_split=100, n_estimators=500; total time=   1.4s\n",
      "[CV] END max_depth=30, max_features=sqrt, min_samples_leaf=10, min_samples_split=2, n_estimators=600; total time=   1.7s\n",
      "[CV] END max_depth=30, max_features=sqrt, min_samples_leaf=10, min_samples_split=2, n_estimators=600; total time=   1.7s\n",
      "[CV] END max_depth=30, max_features=sqrt, min_samples_leaf=10, min_samples_split=2, n_estimators=600; total time=   1.7s\n",
      "[CV] END max_depth=30, max_features=sqrt, min_samples_leaf=10, min_samples_split=2, n_estimators=600; total time=   1.7s\n",
      "[CV] END max_depth=30, max_features=sqrt, min_samples_leaf=10, min_samples_split=2, n_estimators=600; total time=   1.7s\n",
      "[CV] END max_depth=30, max_features=sqrt, min_samples_leaf=10, min_samples_split=2, n_estimators=600; total time=   1.7s\n",
      "[CV] END max_depth=30, max_features=sqrt, min_samples_leaf=10, min_samples_split=2, n_estimators=600; total time=   1.7s\n",
      "[CV] END max_depth=30, max_features=sqrt, min_samples_leaf=10, min_samples_split=2, n_estimators=600; total time=   1.7s\n",
      "[CV] END max_depth=30, max_features=sqrt, min_samples_leaf=10, min_samples_split=2, n_estimators=600; total time=   1.7s\n",
      "[CV] END max_depth=30, max_features=sqrt, min_samples_leaf=10, min_samples_split=2, n_estimators=600; total time=   1.7s\n",
      "[CV] END max_depth=10, max_features=sqrt, min_samples_leaf=2, min_samples_split=2, n_estimators=1000; total time=   3.0s\n",
      "[CV] END max_depth=10, max_features=sqrt, min_samples_leaf=2, min_samples_split=2, n_estimators=1000; total time=   3.0s\n",
      "[CV] END max_depth=10, max_features=sqrt, min_samples_leaf=2, min_samples_split=2, n_estimators=1000; total time=   3.0s\n",
      "[CV] END max_depth=10, max_features=sqrt, min_samples_leaf=2, min_samples_split=2, n_estimators=1000; total time=   3.0s\n",
      "[CV] END max_depth=10, max_features=sqrt, min_samples_leaf=2, min_samples_split=2, n_estimators=1000; total time=   3.0s\n",
      "[CV] END max_depth=10, max_features=sqrt, min_samples_leaf=2, min_samples_split=2, n_estimators=1000; total time=   3.0s\n",
      "[CV] END max_depth=10, max_features=sqrt, min_samples_leaf=2, min_samples_split=2, n_estimators=1000; total time=   3.0s\n",
      "[CV] END max_depth=10, max_features=sqrt, min_samples_leaf=2, min_samples_split=2, n_estimators=1000; total time=   3.1s\n",
      "[CV] END max_depth=10, max_features=sqrt, min_samples_leaf=2, min_samples_split=2, n_estimators=1000; total time=   3.0s\n",
      "[CV] END max_depth=10, max_features=sqrt, min_samples_leaf=2, min_samples_split=2, n_estimators=1000; total time=   3.0s\n",
      "[CV] END max_depth=5, max_features=auto, min_samples_leaf=10, min_samples_split=5, n_estimators=500; total time=   1.5s\n",
      "[CV] END max_depth=5, max_features=auto, min_samples_leaf=10, min_samples_split=5, n_estimators=500; total time=   1.5s\n",
      "[CV] END max_depth=5, max_features=auto, min_samples_leaf=10, min_samples_split=5, n_estimators=500; total time=   1.5s\n",
      "[CV] END max_depth=5, max_features=auto, min_samples_leaf=10, min_samples_split=5, n_estimators=500; total time=   1.5s\n",
      "[CV] END max_depth=5, max_features=auto, min_samples_leaf=10, min_samples_split=5, n_estimators=500; total time=   1.5s\n",
      "[CV] END max_depth=5, max_features=auto, min_samples_leaf=10, min_samples_split=5, n_estimators=500; total time=   1.5s\n",
      "[CV] END max_depth=5, max_features=auto, min_samples_leaf=10, min_samples_split=5, n_estimators=500; total time=   1.5s\n",
      "[CV] END max_depth=5, max_features=auto, min_samples_leaf=10, min_samples_split=5, n_estimators=500; total time=   1.5s\n",
      "[CV] END max_depth=5, max_features=auto, min_samples_leaf=10, min_samples_split=5, n_estimators=500; total time=   1.5s\n",
      "[CV] END max_depth=5, max_features=auto, min_samples_leaf=10, min_samples_split=5, n_estimators=500; total time=   1.5s\n",
      "[CV] END max_depth=25, max_features=auto, min_samples_leaf=10, min_samples_split=10, n_estimators=700; total time=   2.1s\n",
      "[CV] END max_depth=25, max_features=auto, min_samples_leaf=10, min_samples_split=10, n_estimators=700; total time=   2.1s\n",
      "[CV] END max_depth=25, max_features=auto, min_samples_leaf=10, min_samples_split=10, n_estimators=700; total time=   2.1s\n",
      "[CV] END max_depth=25, max_features=auto, min_samples_leaf=10, min_samples_split=10, n_estimators=700; total time=   2.1s\n",
      "[CV] END max_depth=25, max_features=auto, min_samples_leaf=10, min_samples_split=10, n_estimators=700; total time=   2.1s\n",
      "[CV] END max_depth=25, max_features=auto, min_samples_leaf=10, min_samples_split=10, n_estimators=700; total time=   2.1s\n",
      "[CV] END max_depth=25, max_features=auto, min_samples_leaf=10, min_samples_split=10, n_estimators=700; total time=   2.1s\n",
      "[CV] END max_depth=25, max_features=auto, min_samples_leaf=10, min_samples_split=10, n_estimators=700; total time=   2.1s\n",
      "[CV] END max_depth=25, max_features=auto, min_samples_leaf=10, min_samples_split=10, n_estimators=700; total time=   2.1s\n",
      "[CV] END max_depth=25, max_features=auto, min_samples_leaf=10, min_samples_split=10, n_estimators=700; total time=   2.1s\n",
      "[CV] END max_depth=30, max_features=sqrt, min_samples_leaf=10, min_samples_split=15, n_estimators=1000; total time=   2.9s\n",
      "[CV] END max_depth=30, max_features=sqrt, min_samples_leaf=10, min_samples_split=15, n_estimators=1000; total time=   2.8s\n",
      "[CV] END max_depth=30, max_features=sqrt, min_samples_leaf=10, min_samples_split=15, n_estimators=1000; total time=   2.8s\n",
      "[CV] END max_depth=30, max_features=sqrt, min_samples_leaf=10, min_samples_split=15, n_estimators=1000; total time=   2.8s\n",
      "[CV] END max_depth=30, max_features=sqrt, min_samples_leaf=10, min_samples_split=15, n_estimators=1000; total time=   2.8s\n",
      "[CV] END max_depth=30, max_features=sqrt, min_samples_leaf=10, min_samples_split=15, n_estimators=1000; total time=   2.9s\n",
      "[CV] END max_depth=30, max_features=sqrt, min_samples_leaf=10, min_samples_split=15, n_estimators=1000; total time=   2.8s\n",
      "[CV] END max_depth=30, max_features=sqrt, min_samples_leaf=10, min_samples_split=15, n_estimators=1000; total time=   2.8s\n",
      "[CV] END max_depth=30, max_features=sqrt, min_samples_leaf=10, min_samples_split=15, n_estimators=1000; total time=   2.8s\n",
      "[CV] END max_depth=30, max_features=sqrt, min_samples_leaf=10, min_samples_split=15, n_estimators=1000; total time=   2.8s\n",
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=1, min_samples_split=5, n_estimators=600; total time=   1.8s\n",
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=1, min_samples_split=5, n_estimators=600; total time=   1.8s\n",
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=1, min_samples_split=5, n_estimators=600; total time=   1.8s\n",
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=1, min_samples_split=5, n_estimators=600; total time=   1.8s\n",
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=1, min_samples_split=5, n_estimators=600; total time=   1.8s\n",
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=1, min_samples_split=5, n_estimators=600; total time=   1.8s\n",
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=1, min_samples_split=5, n_estimators=600; total time=   1.8s\n",
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=1, min_samples_split=5, n_estimators=600; total time=   1.8s\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=1, min_samples_split=5, n_estimators=600; total time=   1.8s\n",
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=1, min_samples_split=5, n_estimators=600; total time=   2.2s\n",
      "[CV] END max_depth=5, max_features=sqrt, min_samples_leaf=2, min_samples_split=2, n_estimators=1000; total time=   2.9s\n",
      "[CV] END max_depth=5, max_features=sqrt, min_samples_leaf=2, min_samples_split=2, n_estimators=1000; total time=   2.9s\n",
      "[CV] END max_depth=5, max_features=sqrt, min_samples_leaf=2, min_samples_split=2, n_estimators=1000; total time=   3.0s\n",
      "[CV] END max_depth=5, max_features=sqrt, min_samples_leaf=2, min_samples_split=2, n_estimators=1000; total time=   2.9s\n",
      "[CV] END max_depth=5, max_features=sqrt, min_samples_leaf=2, min_samples_split=2, n_estimators=1000; total time=   2.9s\n",
      "[CV] END max_depth=5, max_features=sqrt, min_samples_leaf=2, min_samples_split=2, n_estimators=1000; total time=   3.0s\n",
      "[CV] END max_depth=5, max_features=sqrt, min_samples_leaf=2, min_samples_split=2, n_estimators=1000; total time=   2.9s\n",
      "[CV] END max_depth=5, max_features=sqrt, min_samples_leaf=2, min_samples_split=2, n_estimators=1000; total time=   3.1s\n",
      "[CV] END max_depth=5, max_features=sqrt, min_samples_leaf=2, min_samples_split=2, n_estimators=1000; total time=   2.9s\n",
      "[CV] END max_depth=5, max_features=sqrt, min_samples_leaf=2, min_samples_split=2, n_estimators=1000; total time=   2.9s\n",
      "[CV] END max_depth=25, max_features=auto, min_samples_leaf=5, min_samples_split=15, n_estimators=900; total time=   2.8s\n",
      "[CV] END max_depth=25, max_features=auto, min_samples_leaf=5, min_samples_split=15, n_estimators=900; total time=   2.8s\n",
      "[CV] END max_depth=25, max_features=auto, min_samples_leaf=5, min_samples_split=15, n_estimators=900; total time=   3.0s\n",
      "[CV] END max_depth=25, max_features=auto, min_samples_leaf=5, min_samples_split=15, n_estimators=900; total time=   2.9s\n",
      "[CV] END max_depth=25, max_features=auto, min_samples_leaf=5, min_samples_split=15, n_estimators=900; total time=   3.0s\n",
      "[CV] END max_depth=25, max_features=auto, min_samples_leaf=5, min_samples_split=15, n_estimators=900; total time=   3.3s\n",
      "[CV] END max_depth=25, max_features=auto, min_samples_leaf=5, min_samples_split=15, n_estimators=900; total time=   3.4s\n",
      "[CV] END max_depth=25, max_features=auto, min_samples_leaf=5, min_samples_split=15, n_estimators=900; total time=   3.4s\n",
      "[CV] END max_depth=25, max_features=auto, min_samples_leaf=5, min_samples_split=15, n_estimators=900; total time=   3.3s\n",
      "[CV] END max_depth=25, max_features=auto, min_samples_leaf=5, min_samples_split=15, n_estimators=900; total time=   3.3s\n",
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=1, min_samples_split=15, n_estimators=1100; total time=   3.9s\n",
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=1, min_samples_split=15, n_estimators=1100; total time=   3.8s\n",
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=1, min_samples_split=15, n_estimators=1100; total time=   3.9s\n",
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=1, min_samples_split=15, n_estimators=1100; total time=   3.8s\n",
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=1, min_samples_split=15, n_estimators=1100; total time=   3.9s\n",
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=1, min_samples_split=15, n_estimators=1100; total time=   3.8s\n",
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=1, min_samples_split=15, n_estimators=1100; total time=   3.9s\n",
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=1, min_samples_split=15, n_estimators=1100; total time=   3.9s\n",
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=1, min_samples_split=15, n_estimators=1100; total time=   3.8s\n",
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=1, min_samples_split=15, n_estimators=1100; total time=   3.8s\n",
      "[CV] END max_depth=10, max_features=sqrt, min_samples_leaf=1, min_samples_split=10, n_estimators=1200; total time=   4.2s\n",
      "[CV] END max_depth=10, max_features=sqrt, min_samples_leaf=1, min_samples_split=10, n_estimators=1200; total time=   4.2s\n",
      "[CV] END max_depth=10, max_features=sqrt, min_samples_leaf=1, min_samples_split=10, n_estimators=1200; total time=   4.2s\n",
      "[CV] END max_depth=10, max_features=sqrt, min_samples_leaf=1, min_samples_split=10, n_estimators=1200; total time=   4.3s\n",
      "[CV] END max_depth=10, max_features=sqrt, min_samples_leaf=1, min_samples_split=10, n_estimators=1200; total time=   4.3s\n",
      "[CV] END max_depth=10, max_features=sqrt, min_samples_leaf=1, min_samples_split=10, n_estimators=1200; total time=   4.6s\n",
      "[CV] END max_depth=10, max_features=sqrt, min_samples_leaf=1, min_samples_split=10, n_estimators=1200; total time=   4.6s\n",
      "[CV] END max_depth=10, max_features=sqrt, min_samples_leaf=1, min_samples_split=10, n_estimators=1200; total time=   4.3s\n",
      "[CV] END max_depth=10, max_features=sqrt, min_samples_leaf=1, min_samples_split=10, n_estimators=1200; total time=   4.2s\n",
      "[CV] END max_depth=10, max_features=sqrt, min_samples_leaf=1, min_samples_split=10, n_estimators=1200; total time=   4.3s\n",
      "[CV] END max_depth=5, max_features=sqrt, min_samples_leaf=10, min_samples_split=5, n_estimators=500; total time=   1.6s\n",
      "[CV] END max_depth=5, max_features=sqrt, min_samples_leaf=10, min_samples_split=5, n_estimators=500; total time=   1.6s\n",
      "[CV] END max_depth=5, max_features=sqrt, min_samples_leaf=10, min_samples_split=5, n_estimators=500; total time=   1.6s\n",
      "[CV] END max_depth=5, max_features=sqrt, min_samples_leaf=10, min_samples_split=5, n_estimators=500; total time=   1.7s\n",
      "[CV] END max_depth=5, max_features=sqrt, min_samples_leaf=10, min_samples_split=5, n_estimators=500; total time=   1.7s\n",
      "[CV] END max_depth=5, max_features=sqrt, min_samples_leaf=10, min_samples_split=5, n_estimators=500; total time=   1.7s\n",
      "[CV] END max_depth=5, max_features=sqrt, min_samples_leaf=10, min_samples_split=5, n_estimators=500; total time=   1.7s\n",
      "[CV] END max_depth=5, max_features=sqrt, min_samples_leaf=10, min_samples_split=5, n_estimators=500; total time=   1.6s\n",
      "[CV] END max_depth=5, max_features=sqrt, min_samples_leaf=10, min_samples_split=5, n_estimators=500; total time=   1.7s\n",
      "[CV] END max_depth=5, max_features=sqrt, min_samples_leaf=10, min_samples_split=5, n_estimators=500; total time=   1.7s\n",
      "[CV] END max_depth=30, max_features=sqrt, min_samples_leaf=5, min_samples_split=5, n_estimators=900; total time=   3.1s\n",
      "[CV] END max_depth=30, max_features=sqrt, min_samples_leaf=5, min_samples_split=5, n_estimators=900; total time=   3.2s\n",
      "[CV] END max_depth=30, max_features=sqrt, min_samples_leaf=5, min_samples_split=5, n_estimators=900; total time=   3.2s\n",
      "[CV] END max_depth=30, max_features=sqrt, min_samples_leaf=5, min_samples_split=5, n_estimators=900; total time=   3.1s\n",
      "[CV] END max_depth=30, max_features=sqrt, min_samples_leaf=5, min_samples_split=5, n_estimators=900; total time=   3.2s\n",
      "[CV] END max_depth=30, max_features=sqrt, min_samples_leaf=5, min_samples_split=5, n_estimators=900; total time=   3.2s\n",
      "[CV] END max_depth=30, max_features=sqrt, min_samples_leaf=5, min_samples_split=5, n_estimators=900; total time=   3.1s\n",
      "[CV] END max_depth=30, max_features=sqrt, min_samples_leaf=5, min_samples_split=5, n_estimators=900; total time=   3.1s\n",
      "[CV] END max_depth=30, max_features=sqrt, min_samples_leaf=5, min_samples_split=5, n_estimators=900; total time=   3.1s\n",
      "[CV] END max_depth=30, max_features=sqrt, min_samples_leaf=5, min_samples_split=5, n_estimators=900; total time=   3.6s\n",
      "[CV] END max_depth=15, max_features=auto, min_samples_leaf=1, min_samples_split=15, n_estimators=300; total time=   1.6s\n",
      "[CV] END max_depth=15, max_features=auto, min_samples_leaf=1, min_samples_split=15, n_estimators=300; total time=   1.3s\n",
      "[CV] END max_depth=15, max_features=auto, min_samples_leaf=1, min_samples_split=15, n_estimators=300; total time=   1.3s\n",
      "[CV] END max_depth=15, max_features=auto, min_samples_leaf=1, min_samples_split=15, n_estimators=300; total time=   1.1s\n",
      "[CV] END max_depth=15, max_features=auto, min_samples_leaf=1, min_samples_split=15, n_estimators=300; total time=   1.1s\n",
      "[CV] END max_depth=15, max_features=auto, min_samples_leaf=1, min_samples_split=15, n_estimators=300; total time=   1.0s\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV] END max_depth=15, max_features=auto, min_samples_leaf=1, min_samples_split=15, n_estimators=300; total time=   1.4s\n",
      "[CV] END max_depth=15, max_features=auto, min_samples_leaf=1, min_samples_split=15, n_estimators=300; total time=   1.5s\n",
      "[CV] END max_depth=15, max_features=auto, min_samples_leaf=1, min_samples_split=15, n_estimators=300; total time=   1.2s\n",
      "[CV] END max_depth=15, max_features=auto, min_samples_leaf=1, min_samples_split=15, n_estimators=300; total time=   1.1s\n",
      "[CV] END max_depth=20, max_features=auto, min_samples_leaf=1, min_samples_split=10, n_estimators=1200; total time=   5.6s\n",
      "[CV] END max_depth=20, max_features=auto, min_samples_leaf=1, min_samples_split=10, n_estimators=1200; total time=   6.0s\n",
      "[CV] END max_depth=20, max_features=auto, min_samples_leaf=1, min_samples_split=10, n_estimators=1200; total time=   5.6s\n",
      "[CV] END max_depth=20, max_features=auto, min_samples_leaf=1, min_samples_split=10, n_estimators=1200; total time=   6.1s\n",
      "[CV] END max_depth=20, max_features=auto, min_samples_leaf=1, min_samples_split=10, n_estimators=1200; total time=   6.4s\n",
      "[CV] END max_depth=20, max_features=auto, min_samples_leaf=1, min_samples_split=10, n_estimators=1200; total time=   5.5s\n",
      "[CV] END max_depth=20, max_features=auto, min_samples_leaf=1, min_samples_split=10, n_estimators=1200; total time=   5.0s\n",
      "[CV] END max_depth=20, max_features=auto, min_samples_leaf=1, min_samples_split=10, n_estimators=1200; total time=   5.9s\n",
      "[CV] END max_depth=20, max_features=auto, min_samples_leaf=1, min_samples_split=10, n_estimators=1200; total time=   6.1s\n",
      "[CV] END max_depth=20, max_features=auto, min_samples_leaf=1, min_samples_split=10, n_estimators=1200; total time=   5.9s\n",
      "[CV] END max_depth=5, max_features=sqrt, min_samples_leaf=10, min_samples_split=5, n_estimators=200; total time=   0.8s\n",
      "[CV] END max_depth=5, max_features=sqrt, min_samples_leaf=10, min_samples_split=5, n_estimators=200; total time=   0.6s\n",
      "[CV] END max_depth=5, max_features=sqrt, min_samples_leaf=10, min_samples_split=5, n_estimators=200; total time=   0.6s\n",
      "[CV] END max_depth=5, max_features=sqrt, min_samples_leaf=10, min_samples_split=5, n_estimators=200; total time=   0.7s\n",
      "[CV] END max_depth=5, max_features=sqrt, min_samples_leaf=10, min_samples_split=5, n_estimators=200; total time=   0.9s\n",
      "[CV] END max_depth=5, max_features=sqrt, min_samples_leaf=10, min_samples_split=5, n_estimators=200; total time=   0.7s\n",
      "[CV] END max_depth=5, max_features=sqrt, min_samples_leaf=10, min_samples_split=5, n_estimators=200; total time=   0.8s\n",
      "[CV] END max_depth=5, max_features=sqrt, min_samples_leaf=10, min_samples_split=5, n_estimators=200; total time=   0.9s\n",
      "[CV] END max_depth=5, max_features=sqrt, min_samples_leaf=10, min_samples_split=5, n_estimators=200; total time=   0.8s\n",
      "[CV] END max_depth=5, max_features=sqrt, min_samples_leaf=10, min_samples_split=5, n_estimators=200; total time=   0.8s\n",
      "[CV] END max_depth=30, max_features=sqrt, min_samples_leaf=10, min_samples_split=100, n_estimators=900; total time=   3.7s\n",
      "[CV] END max_depth=30, max_features=sqrt, min_samples_leaf=10, min_samples_split=100, n_estimators=900; total time=   3.7s\n",
      "[CV] END max_depth=30, max_features=sqrt, min_samples_leaf=10, min_samples_split=100, n_estimators=900; total time=   3.7s\n",
      "[CV] END max_depth=30, max_features=sqrt, min_samples_leaf=10, min_samples_split=100, n_estimators=900; total time=   3.9s\n",
      "[CV] END max_depth=30, max_features=sqrt, min_samples_leaf=10, min_samples_split=100, n_estimators=900; total time=   4.0s\n",
      "[CV] END max_depth=30, max_features=sqrt, min_samples_leaf=10, min_samples_split=100, n_estimators=900; total time=   5.2s\n",
      "[CV] END max_depth=30, max_features=sqrt, min_samples_leaf=10, min_samples_split=100, n_estimators=900; total time=   3.6s\n",
      "[CV] END max_depth=30, max_features=sqrt, min_samples_leaf=10, min_samples_split=100, n_estimators=900; total time=   3.4s\n",
      "[CV] END max_depth=30, max_features=sqrt, min_samples_leaf=10, min_samples_split=100, n_estimators=900; total time=   3.2s\n",
      "[CV] END max_depth=30, max_features=sqrt, min_samples_leaf=10, min_samples_split=100, n_estimators=900; total time=   3.5s\n",
      "[CV] END max_depth=30, max_features=sqrt, min_samples_leaf=2, min_samples_split=100, n_estimators=200; total time=   0.7s\n",
      "[CV] END max_depth=30, max_features=sqrt, min_samples_leaf=2, min_samples_split=100, n_estimators=200; total time=   0.7s\n",
      "[CV] END max_depth=30, max_features=sqrt, min_samples_leaf=2, min_samples_split=100, n_estimators=200; total time=   0.7s\n",
      "[CV] END max_depth=30, max_features=sqrt, min_samples_leaf=2, min_samples_split=100, n_estimators=200; total time=   0.9s\n",
      "[CV] END max_depth=30, max_features=sqrt, min_samples_leaf=2, min_samples_split=100, n_estimators=200; total time=   0.7s\n",
      "[CV] END max_depth=30, max_features=sqrt, min_samples_leaf=2, min_samples_split=100, n_estimators=200; total time=   0.7s\n",
      "[CV] END max_depth=30, max_features=sqrt, min_samples_leaf=2, min_samples_split=100, n_estimators=200; total time=   0.6s\n",
      "[CV] END max_depth=30, max_features=sqrt, min_samples_leaf=2, min_samples_split=100, n_estimators=200; total time=   0.7s\n",
      "[CV] END max_depth=30, max_features=sqrt, min_samples_leaf=2, min_samples_split=100, n_estimators=200; total time=   0.6s\n",
      "[CV] END max_depth=30, max_features=sqrt, min_samples_leaf=2, min_samples_split=100, n_estimators=200; total time=   0.6s\n",
      "[CV] END max_depth=5, max_features=auto, min_samples_leaf=5, min_samples_split=100, n_estimators=1100; total time=   4.0s\n",
      "[CV] END max_depth=5, max_features=auto, min_samples_leaf=5, min_samples_split=100, n_estimators=1100; total time=   4.1s\n",
      "[CV] END max_depth=5, max_features=auto, min_samples_leaf=5, min_samples_split=100, n_estimators=1100; total time=   5.9s\n",
      "[CV] END max_depth=5, max_features=auto, min_samples_leaf=5, min_samples_split=100, n_estimators=1100; total time=   3.9s\n",
      "[CV] END max_depth=5, max_features=auto, min_samples_leaf=5, min_samples_split=100, n_estimators=1100; total time=   4.6s\n",
      "[CV] END max_depth=5, max_features=auto, min_samples_leaf=5, min_samples_split=100, n_estimators=1100; total time=   5.0s\n",
      "[CV] END max_depth=5, max_features=auto, min_samples_leaf=5, min_samples_split=100, n_estimators=1100; total time=   5.0s\n",
      "[CV] END max_depth=5, max_features=auto, min_samples_leaf=5, min_samples_split=100, n_estimators=1100; total time=   4.4s\n",
      "[CV] END max_depth=5, max_features=auto, min_samples_leaf=5, min_samples_split=100, n_estimators=1100; total time=   3.8s\n",
      "[CV] END max_depth=5, max_features=auto, min_samples_leaf=5, min_samples_split=100, n_estimators=1100; total time=   3.6s\n",
      "[CV] END max_depth=10, max_features=sqrt, min_samples_leaf=1, min_samples_split=2, n_estimators=800; total time=   3.1s\n",
      "[CV] END max_depth=10, max_features=sqrt, min_samples_leaf=1, min_samples_split=2, n_estimators=800; total time=   2.5s\n",
      "[CV] END max_depth=10, max_features=sqrt, min_samples_leaf=1, min_samples_split=2, n_estimators=800; total time=   2.5s\n",
      "[CV] END max_depth=10, max_features=sqrt, min_samples_leaf=1, min_samples_split=2, n_estimators=800; total time=   2.5s\n",
      "[CV] END max_depth=10, max_features=sqrt, min_samples_leaf=1, min_samples_split=2, n_estimators=800; total time=   2.5s\n",
      "[CV] END max_depth=10, max_features=sqrt, min_samples_leaf=1, min_samples_split=2, n_estimators=800; total time=   2.5s\n",
      "[CV] END max_depth=10, max_features=sqrt, min_samples_leaf=1, min_samples_split=2, n_estimators=800; total time=   2.5s\n",
      "[CV] END max_depth=10, max_features=sqrt, min_samples_leaf=1, min_samples_split=2, n_estimators=800; total time=   2.5s\n",
      "[CV] END max_depth=10, max_features=sqrt, min_samples_leaf=1, min_samples_split=2, n_estimators=800; total time=   2.6s\n",
      "[CV] END max_depth=10, max_features=sqrt, min_samples_leaf=1, min_samples_split=2, n_estimators=800; total time=   2.5s\n",
      "[CV] END max_depth=25, max_features=sqrt, min_samples_leaf=5, min_samples_split=2, n_estimators=700; total time=   2.0s\n",
      "[CV] END max_depth=25, max_features=sqrt, min_samples_leaf=5, min_samples_split=2, n_estimators=700; total time=   2.0s\n",
      "[CV] END max_depth=25, max_features=sqrt, min_samples_leaf=5, min_samples_split=2, n_estimators=700; total time=   2.0s\n",
      "[CV] END max_depth=25, max_features=sqrt, min_samples_leaf=5, min_samples_split=2, n_estimators=700; total time=   2.0s\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV] END max_depth=25, max_features=sqrt, min_samples_leaf=5, min_samples_split=2, n_estimators=700; total time=   2.0s\n",
      "[CV] END max_depth=25, max_features=sqrt, min_samples_leaf=5, min_samples_split=2, n_estimators=700; total time=   2.0s\n",
      "[CV] END max_depth=25, max_features=sqrt, min_samples_leaf=5, min_samples_split=2, n_estimators=700; total time=   2.0s\n",
      "[CV] END max_depth=25, max_features=sqrt, min_samples_leaf=5, min_samples_split=2, n_estimators=700; total time=   2.0s\n",
      "[CV] END max_depth=25, max_features=sqrt, min_samples_leaf=5, min_samples_split=2, n_estimators=700; total time=   2.0s\n",
      "[CV] END max_depth=25, max_features=sqrt, min_samples_leaf=5, min_samples_split=2, n_estimators=700; total time=   2.0s\n",
      "[CV] END max_depth=5, max_features=sqrt, min_samples_leaf=2, min_samples_split=10, n_estimators=100; total time=   0.2s\n",
      "[CV] END max_depth=5, max_features=sqrt, min_samples_leaf=2, min_samples_split=10, n_estimators=100; total time=   0.2s\n",
      "[CV] END max_depth=5, max_features=sqrt, min_samples_leaf=2, min_samples_split=10, n_estimators=100; total time=   0.2s\n",
      "[CV] END max_depth=5, max_features=sqrt, min_samples_leaf=2, min_samples_split=10, n_estimators=100; total time=   0.2s\n",
      "[CV] END max_depth=5, max_features=sqrt, min_samples_leaf=2, min_samples_split=10, n_estimators=100; total time=   0.2s\n",
      "[CV] END max_depth=5, max_features=sqrt, min_samples_leaf=2, min_samples_split=10, n_estimators=100; total time=   0.2s\n",
      "[CV] END max_depth=5, max_features=sqrt, min_samples_leaf=2, min_samples_split=10, n_estimators=100; total time=   0.2s\n",
      "[CV] END max_depth=5, max_features=sqrt, min_samples_leaf=2, min_samples_split=10, n_estimators=100; total time=   0.2s\n",
      "[CV] END max_depth=5, max_features=sqrt, min_samples_leaf=2, min_samples_split=10, n_estimators=100; total time=   0.2s\n",
      "[CV] END max_depth=5, max_features=sqrt, min_samples_leaf=2, min_samples_split=10, n_estimators=100; total time=   0.2s\n",
      "[CV] END max_depth=10, max_features=sqrt, min_samples_leaf=1, min_samples_split=15, n_estimators=1000; total time=   2.9s\n",
      "[CV] END max_depth=10, max_features=sqrt, min_samples_leaf=1, min_samples_split=15, n_estimators=1000; total time=   2.9s\n",
      "[CV] END max_depth=10, max_features=sqrt, min_samples_leaf=1, min_samples_split=15, n_estimators=1000; total time=   2.9s\n",
      "[CV] END max_depth=10, max_features=sqrt, min_samples_leaf=1, min_samples_split=15, n_estimators=1000; total time=   2.9s\n",
      "[CV] END max_depth=10, max_features=sqrt, min_samples_leaf=1, min_samples_split=15, n_estimators=1000; total time=   2.9s\n",
      "[CV] END max_depth=10, max_features=sqrt, min_samples_leaf=1, min_samples_split=15, n_estimators=1000; total time=   2.9s\n",
      "[CV] END max_depth=10, max_features=sqrt, min_samples_leaf=1, min_samples_split=15, n_estimators=1000; total time=   2.9s\n",
      "[CV] END max_depth=10, max_features=sqrt, min_samples_leaf=1, min_samples_split=15, n_estimators=1000; total time=   3.0s\n",
      "[CV] END max_depth=10, max_features=sqrt, min_samples_leaf=1, min_samples_split=15, n_estimators=1000; total time=   3.0s\n",
      "[CV] END max_depth=10, max_features=sqrt, min_samples_leaf=1, min_samples_split=15, n_estimators=1000; total time=   2.9s\n",
      "[CV] END max_depth=20, max_features=auto, min_samples_leaf=1, min_samples_split=10, n_estimators=500; total time=   1.6s\n",
      "[CV] END max_depth=20, max_features=auto, min_samples_leaf=1, min_samples_split=10, n_estimators=500; total time=   1.6s\n",
      "[CV] END max_depth=20, max_features=auto, min_samples_leaf=1, min_samples_split=10, n_estimators=500; total time=   1.6s\n",
      "[CV] END max_depth=20, max_features=auto, min_samples_leaf=1, min_samples_split=10, n_estimators=500; total time=   1.6s\n",
      "[CV] END max_depth=20, max_features=auto, min_samples_leaf=1, min_samples_split=10, n_estimators=500; total time=   1.6s\n",
      "[CV] END max_depth=20, max_features=auto, min_samples_leaf=1, min_samples_split=10, n_estimators=500; total time=   1.6s\n",
      "[CV] END max_depth=20, max_features=auto, min_samples_leaf=1, min_samples_split=10, n_estimators=500; total time=   1.7s\n",
      "[CV] END max_depth=20, max_features=auto, min_samples_leaf=1, min_samples_split=10, n_estimators=500; total time=   1.6s\n",
      "[CV] END max_depth=20, max_features=auto, min_samples_leaf=1, min_samples_split=10, n_estimators=500; total time=   1.6s\n",
      "[CV] END max_depth=20, max_features=auto, min_samples_leaf=1, min_samples_split=10, n_estimators=500; total time=   1.6s\n",
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=1, min_samples_split=15, n_estimators=200; total time=   0.5s\n",
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=1, min_samples_split=15, n_estimators=200; total time=   0.5s\n",
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=1, min_samples_split=15, n_estimators=200; total time=   0.5s\n",
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=1, min_samples_split=15, n_estimators=200; total time=   0.5s\n",
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=1, min_samples_split=15, n_estimators=200; total time=   0.5s\n",
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=1, min_samples_split=15, n_estimators=200; total time=   0.5s\n",
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=1, min_samples_split=15, n_estimators=200; total time=   0.5s\n",
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=1, min_samples_split=15, n_estimators=200; total time=   0.5s\n",
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=1, min_samples_split=15, n_estimators=200; total time=   0.5s\n",
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=1, min_samples_split=15, n_estimators=200; total time=   0.5s\n",
      "[CV] END max_depth=10, max_features=auto, min_samples_leaf=10, min_samples_split=10, n_estimators=1200; total time=   4.3s\n",
      "[CV] END max_depth=10, max_features=auto, min_samples_leaf=10, min_samples_split=10, n_estimators=1200; total time=   4.7s\n",
      "[CV] END max_depth=10, max_features=auto, min_samples_leaf=10, min_samples_split=10, n_estimators=1200; total time=   4.2s\n",
      "[CV] END max_depth=10, max_features=auto, min_samples_leaf=10, min_samples_split=10, n_estimators=1200; total time=   4.0s\n",
      "[CV] END max_depth=10, max_features=auto, min_samples_leaf=10, min_samples_split=10, n_estimators=1200; total time=   4.1s\n",
      "[CV] END max_depth=10, max_features=auto, min_samples_leaf=10, min_samples_split=10, n_estimators=1200; total time=   4.3s\n",
      "[CV] END max_depth=10, max_features=auto, min_samples_leaf=10, min_samples_split=10, n_estimators=1200; total time=   4.2s\n",
      "[CV] END max_depth=10, max_features=auto, min_samples_leaf=10, min_samples_split=10, n_estimators=1200; total time=   4.4s\n",
      "[CV] END max_depth=10, max_features=auto, min_samples_leaf=10, min_samples_split=10, n_estimators=1200; total time=   4.4s\n",
      "[CV] END max_depth=10, max_features=auto, min_samples_leaf=10, min_samples_split=10, n_estimators=1200; total time=   4.8s\n",
      "[CV] END max_depth=30, max_features=auto, min_samples_leaf=1, min_samples_split=5, n_estimators=500; total time=   2.2s\n",
      "[CV] END max_depth=30, max_features=auto, min_samples_leaf=1, min_samples_split=5, n_estimators=500; total time=   1.9s\n",
      "[CV] END max_depth=30, max_features=auto, min_samples_leaf=1, min_samples_split=5, n_estimators=500; total time=   1.8s\n",
      "[CV] END max_depth=30, max_features=auto, min_samples_leaf=1, min_samples_split=5, n_estimators=500; total time=   2.0s\n",
      "[CV] END max_depth=30, max_features=auto, min_samples_leaf=1, min_samples_split=5, n_estimators=500; total time=   1.7s\n",
      "[CV] END max_depth=30, max_features=auto, min_samples_leaf=1, min_samples_split=5, n_estimators=500; total time=   1.8s\n",
      "[CV] END max_depth=30, max_features=auto, min_samples_leaf=1, min_samples_split=5, n_estimators=500; total time=   1.7s\n",
      "[CV] END max_depth=30, max_features=auto, min_samples_leaf=1, min_samples_split=5, n_estimators=500; total time=   1.7s\n",
      "[CV] END max_depth=30, max_features=auto, min_samples_leaf=1, min_samples_split=5, n_estimators=500; total time=   1.7s\n",
      "[CV] END max_depth=30, max_features=auto, min_samples_leaf=1, min_samples_split=5, n_estimators=500; total time=   1.8s\n",
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=10, min_samples_split=100, n_estimators=1100; total time=   3.2s\n",
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=10, min_samples_split=100, n_estimators=1100; total time=   5.1s\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=10, min_samples_split=100, n_estimators=1100; total time=   4.0s\n",
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=10, min_samples_split=100, n_estimators=1100; total time=   4.8s\n",
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=10, min_samples_split=100, n_estimators=1100; total time=   4.0s\n",
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=10, min_samples_split=100, n_estimators=1100; total time=   4.1s\n",
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=10, min_samples_split=100, n_estimators=1100; total time=   3.5s\n",
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=10, min_samples_split=100, n_estimators=1100; total time=   3.6s\n",
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=10, min_samples_split=100, n_estimators=1100; total time=   3.6s\n",
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=10, min_samples_split=100, n_estimators=1100; total time=   4.0s\n",
      "[CV] END max_depth=10, max_features=auto, min_samples_leaf=2, min_samples_split=5, n_estimators=300; total time=   1.2s\n",
      "[CV] END max_depth=10, max_features=auto, min_samples_leaf=2, min_samples_split=5, n_estimators=300; total time=   1.1s\n",
      "[CV] END max_depth=10, max_features=auto, min_samples_leaf=2, min_samples_split=5, n_estimators=300; total time=   1.1s\n",
      "[CV] END max_depth=10, max_features=auto, min_samples_leaf=2, min_samples_split=5, n_estimators=300; total time=   1.0s\n",
      "[CV] END max_depth=10, max_features=auto, min_samples_leaf=2, min_samples_split=5, n_estimators=300; total time=   1.1s\n",
      "[CV] END max_depth=10, max_features=auto, min_samples_leaf=2, min_samples_split=5, n_estimators=300; total time=   1.1s\n",
      "[CV] END max_depth=10, max_features=auto, min_samples_leaf=2, min_samples_split=5, n_estimators=300; total time=   1.1s\n",
      "[CV] END max_depth=10, max_features=auto, min_samples_leaf=2, min_samples_split=5, n_estimators=300; total time=   1.0s\n",
      "[CV] END max_depth=10, max_features=auto, min_samples_leaf=2, min_samples_split=5, n_estimators=300; total time=   1.1s\n",
      "[CV] END max_depth=10, max_features=auto, min_samples_leaf=2, min_samples_split=5, n_estimators=300; total time=   1.0s\n",
      "[CV] END max_depth=15, max_features=sqrt, min_samples_leaf=1, min_samples_split=2, n_estimators=500; total time=   1.9s\n",
      "[CV] END max_depth=15, max_features=sqrt, min_samples_leaf=1, min_samples_split=2, n_estimators=500; total time=   1.8s\n",
      "[CV] END max_depth=15, max_features=sqrt, min_samples_leaf=1, min_samples_split=2, n_estimators=500; total time=   1.8s\n",
      "[CV] END max_depth=15, max_features=sqrt, min_samples_leaf=1, min_samples_split=2, n_estimators=500; total time=   1.8s\n",
      "[CV] END max_depth=15, max_features=sqrt, min_samples_leaf=1, min_samples_split=2, n_estimators=500; total time=   1.9s\n",
      "[CV] END max_depth=15, max_features=sqrt, min_samples_leaf=1, min_samples_split=2, n_estimators=500; total time=   1.8s\n",
      "[CV] END max_depth=15, max_features=sqrt, min_samples_leaf=1, min_samples_split=2, n_estimators=500; total time=   1.8s\n",
      "[CV] END max_depth=15, max_features=sqrt, min_samples_leaf=1, min_samples_split=2, n_estimators=500; total time=   1.8s\n",
      "[CV] END max_depth=15, max_features=sqrt, min_samples_leaf=1, min_samples_split=2, n_estimators=500; total time=   2.0s\n",
      "[CV] END max_depth=15, max_features=sqrt, min_samples_leaf=1, min_samples_split=2, n_estimators=500; total time=   1.7s\n",
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=2, min_samples_split=2, n_estimators=500; total time=   1.6s\n",
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=2, min_samples_split=2, n_estimators=500; total time=   1.6s\n",
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=2, min_samples_split=2, n_estimators=500; total time=   1.6s\n",
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=2, min_samples_split=2, n_estimators=500; total time=   1.7s\n",
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=2, min_samples_split=2, n_estimators=500; total time=   1.6s\n",
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=2, min_samples_split=2, n_estimators=500; total time=   1.5s\n",
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=2, min_samples_split=2, n_estimators=500; total time=   1.7s\n",
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=2, min_samples_split=2, n_estimators=500; total time=   1.5s\n",
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=2, min_samples_split=2, n_estimators=500; total time=   1.7s\n",
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=2, min_samples_split=2, n_estimators=500; total time=   1.5s\n",
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=1, min_samples_split=10, n_estimators=700; total time=   2.3s\n",
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=1, min_samples_split=10, n_estimators=700; total time=   2.3s\n",
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=1, min_samples_split=10, n_estimators=700; total time=   2.9s\n",
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=1, min_samples_split=10, n_estimators=700; total time=   2.8s\n",
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=1, min_samples_split=10, n_estimators=700; total time=   2.5s\n",
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=1, min_samples_split=10, n_estimators=700; total time=   2.4s\n",
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=1, min_samples_split=10, n_estimators=700; total time=   2.1s\n",
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=1, min_samples_split=10, n_estimators=700; total time=   2.1s\n",
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=1, min_samples_split=10, n_estimators=700; total time=   2.0s\n",
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=1, min_samples_split=10, n_estimators=700; total time=   2.1s\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "RandomizedSearchCV(cv=10, estimator=RandomForestRegressor(), n_iter=100,\n",
       "                   n_jobs=1,\n",
       "                   param_distributions={'max_depth': [5, 10, 15, 20, 25, 30],\n",
       "                                        'max_features': ['auto', 'sqrt'],\n",
       "                                        'min_samples_leaf': [1, 2, 5, 10],\n",
       "                                        'min_samples_split': [2, 5, 10, 15,\n",
       "                                                              100],\n",
       "                                        'n_estimators': [100, 200, 300, 400,\n",
       "                                                         500, 600, 700, 800,\n",
       "                                                         900, 1000, 1100,\n",
       "                                                         1200]},\n",
       "                   random_state=42, return_train_score=True,\n",
       "                   scoring='neg_mean_squared_error', verbose=2)"
      ]
     },
     "execution_count": 99,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rf_random.fit(x_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "metadata": {},
   "outputs": [],
   "source": [
    "predictions=rf_random.predict(x_test)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "RandomForestRegressor(max_depth=30, min_samples_split=5, n_estimators=500)"
      ]
     },
     "execution_count": 100,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rf_random.best_estimator_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 0.67732853,  9.72923568,  5.48721776,  1.12220964,  0.62271997,\n",
       "        4.82867847,  4.67203298,  1.43361456,  0.16314511,  5.07179202,\n",
       "        5.01704589,  3.43375569,  0.45480285,  8.17942893,  4.29389667,\n",
       "        0.71333596,  5.05757118,  0.31605794,  9.11706007,  7.81686641,\n",
       "        5.1955419 ,  0.49997003, 15.0849494 ,  0.55758604,  6.56360376,\n",
       "        0.3729892 ,  5.40972383,  0.51856035, 10.34000798,  3.15591896,\n",
       "        0.42730915,  0.39983139,  1.19183067,  0.49479599,  3.02406571,\n",
       "        3.02406571,  7.97221953,  5.78860998,  7.25412288,  0.18960736,\n",
       "        0.66866364,  1.16460418,  3.31843325,  2.9364767 ,  2.01727617,\n",
       "        2.87055174,  0.20618741,  0.6578183 ,  7.36961474,  6.86428028,\n",
       "        5.82906566,  3.20679516,  2.32886313,  0.20268588,  4.71247414,\n",
       "        6.22548089,  5.20320118, 14.2203044 , 14.12224907,  0.74614762,\n",
       "        0.62297743])"
      ]
     },
     "execution_count": 102,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "predictions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.FacetGrid at 0x24fed55a730>"
      ]
     },
     "execution_count": 103,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.displot(y_test-predictions) #il fatto che sia cosi schiacciata ci sta dicendo che la differenza tra le previsioni e i valori reali è minima"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "plt.hist(df['Selling_Price'], bins = 10)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.collections.PathCollection at 0x24fef9d68e0>"
      ]
     },
     "execution_count": 104,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(y_test, predictions) #le previsioni sembrano abbastanza buone "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'n_estimators': 500,\n",
       " 'min_samples_split': 5,\n",
       " 'min_samples_leaf': 1,\n",
       " 'max_features': 'auto',\n",
       " 'max_depth': 30}"
      ]
     },
     "execution_count": 105,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rf_random.best_params_  #Questa è la miglior griglia di iperparametri"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "RandomForestRegressor(max_depth=30, min_samples_split=5, n_estimators=500)"
      ]
     },
     "execution_count": 107,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## ora vediamo IL RISULTATO\n",
    "best_random = rf_random.best_estimator_\n",
    "\n",
    "best_model= RandomForestRegressor(max_depth=30, max_features='auto', n_estimators=500,min_samples_split= 5,\n",
    " min_samples_leaf=1)\n",
    "best_model.fit(x_train, y_train)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([8.93192769e-01, 2.26710882e-02, 3.06220714e-05, 6.96858440e-02,\n",
       "       3.19681222e-03, 2.79509638e-03, 3.80038000e-03, 4.62738801e-03])"
      ]
     },
     "execution_count": 108,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean Squared Error (MSE): 0.6632239365521833\n"
     ]
    }
   ],
   "source": [
    "# ##notiamo come l'MSE è molto basso. Prima provando con una CV=10 e iterazioni=10 l'MSE era di 3.47(vedi cella sotto); mentre ora 0.66 (con 10 CV e 100 iterazioni)\n",
    "from sklearn import metrics\n",
    "print('Mean Squared Error (MSE):', metrics.mean_squared_error(y_test, predictions))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean Squared Error (MSE): 3.477945387586918\n"
     ]
    }
   ],
   "source": [
    "## MSE con CV=10 e iterazioni =10."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
